package consensus_interface

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Block) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Round":
			z.Round, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		case "Payload":
			z.Payload, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "ParentQC":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ParentQC")
					return
				}
				z.ParentQC = nil
			} else {
				if z.ParentQC == nil {
					z.ParentQC = new(QC)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "ParentQC")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "ParentQC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "VoteData":
						err = z.ParentQC.VoteData.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "ParentQC", "VoteData")
							return
						}
					case "JointSignature":
						{
							var zb0003 []byte
							zb0003, err = dc.ReadBytes([]byte(z.ParentQC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "ParentQC", "JointSignature")
								return
							}
							z.ParentQC.JointSignature = JointSignature(zb0003)
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "ParentQC")
							return
						}
					}
				}
			}
		case "Id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Block) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Round"
	err = en.Append(0x84, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Round)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	// write "Payload"
	err = en.Append(0xa7, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Payload)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	// write "ParentQC"
	err = en.Append(0xa8, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x43)
	if err != nil {
		return
	}
	if z.ParentQC == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "VoteData"
		err = en.Append(0x82, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61)
		if err != nil {
			return
		}
		err = z.ParentQC.VoteData.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ParentQC", "VoteData")
			return
		}
		// write "JointSignature"
		err = en.Append(0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes([]byte(z.ParentQC.JointSignature))
		if err != nil {
			err = msgp.WrapError(err, "ParentQC", "JointSignature")
			return
		}
	}
	// write "Id"
	err = en.Append(0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Block) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Round"
	o = append(o, 0x84, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.Round)
	// string "Payload"
	o = append(o, 0xa7, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	o = msgp.AppendString(o, z.Payload)
	// string "ParentQC"
	o = append(o, 0xa8, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x43)
	if z.ParentQC == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "VoteData"
		o = append(o, 0x82, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61)
		o, err = z.ParentQC.VoteData.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ParentQC", "VoteData")
			return
		}
		// string "JointSignature"
		o = append(o, 0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		o = msgp.AppendBytes(o, []byte(z.ParentQC.JointSignature))
	}
	// string "Id"
	o = append(o, 0xa2, 0x49, 0x64)
	o = msgp.AppendString(o, z.Id)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Block) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Round":
			z.Round, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		case "Payload":
			z.Payload, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "ParentQC":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ParentQC = nil
			} else {
				if z.ParentQC == nil {
					z.ParentQC = new(QC)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ParentQC")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ParentQC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "VoteData":
						bts, err = z.ParentQC.VoteData.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ParentQC", "VoteData")
							return
						}
					case "JointSignature":
						{
							var zb0003 []byte
							zb0003, bts, err = msgp.ReadBytesBytes(bts, []byte(z.ParentQC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "ParentQC", "JointSignature")
								return
							}
							z.ParentQC.JointSignature = JointSignature(zb0003)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ParentQC")
							return
						}
					}
				}
			}
		case "Id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Block) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 8 + msgp.StringPrefixSize + len(z.Payload) + 9
	if z.ParentQC == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 9 + z.ParentQC.VoteData.Msgsize() + 15 + msgp.BytesPrefixSize + len([]byte(z.ParentQC.JointSignature))
	}
	s += 3 + msgp.StringPrefixSize + len(z.Id)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContentProposal) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Proposal":
			err = z.Proposal.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Proposal")
				return
			}
		case "TC":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TC")
					return
				}
				z.TC = nil
			} else {
				if z.TC == nil {
					z.TC = new(TC)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "TC")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "TC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Round":
						z.TC.Round, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "TC", "Round")
							return
						}
					case "JointSignature":
						{
							var zb0003 []byte
							zb0003, err = dc.ReadBytes([]byte(z.TC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "TC", "JointSignature")
								return
							}
							z.TC.JointSignature = JointSignature(zb0003)
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "TC")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContentProposal) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Proposal"
	err = en.Append(0x82, 0xa8, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = z.Proposal.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Proposal")
		return
	}
	// write "TC"
	err = en.Append(0xa2, 0x54, 0x43)
	if err != nil {
		return
	}
	if z.TC == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Round"
		err = en.Append(0x82, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt(z.TC.Round)
		if err != nil {
			err = msgp.WrapError(err, "TC", "Round")
			return
		}
		// write "JointSignature"
		err = en.Append(0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes([]byte(z.TC.JointSignature))
		if err != nil {
			err = msgp.WrapError(err, "TC", "JointSignature")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContentProposal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Proposal"
	o = append(o, 0x82, 0xa8, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c)
	o, err = z.Proposal.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Proposal")
		return
	}
	// string "TC"
	o = append(o, 0xa2, 0x54, 0x43)
	if z.TC == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Round"
		o = append(o, 0x82, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
		o = msgp.AppendInt(o, z.TC.Round)
		// string "JointSignature"
		o = append(o, 0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		o = msgp.AppendBytes(o, []byte(z.TC.JointSignature))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContentProposal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Proposal":
			bts, err = z.Proposal.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Proposal")
				return
			}
		case "TC":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TC = nil
			} else {
				if z.TC == nil {
					z.TC = new(TC)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TC")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "TC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Round":
						z.TC.Round, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "TC", "Round")
							return
						}
					case "JointSignature":
						{
							var zb0003 []byte
							zb0003, bts, err = msgp.ReadBytesBytes(bts, []byte(z.TC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "TC", "JointSignature")
								return
							}
							z.TC.JointSignature = JointSignature(zb0003)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "TC")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContentProposal) Msgsize() (s int) {
	s = 1 + 9 + z.Proposal.Msgsize() + 3
	if z.TC == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 6 + msgp.IntSize + 15 + msgp.BytesPrefixSize + len([]byte(z.TC.JointSignature))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContentString) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Content":
			z.Content, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ContentString) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Content"
	err = en.Append(0x81, 0xa7, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Content)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ContentString) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Content"
	o = append(o, 0x81, 0xa7, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Content)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContentString) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Content":
			z.Content, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ContentString) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Content)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContentTimeout) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Round":
			z.Round, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		case "HighQC":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "HighQC")
					return
				}
				z.HighQC = nil
			} else {
				if z.HighQC == nil {
					z.HighQC = new(QC)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "HighQC")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "HighQC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "VoteData":
						err = z.HighQC.VoteData.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "HighQC", "VoteData")
							return
						}
					case "JointSignature":
						{
							var zb0003 []byte
							zb0003, err = dc.ReadBytes([]byte(z.HighQC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "HighQC", "JointSignature")
								return
							}
							z.HighQC.JointSignature = JointSignature(zb0003)
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "HighQC")
							return
						}
					}
				}
			}
		case "TC":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TC")
					return
				}
				z.TC = nil
			} else {
				if z.TC == nil {
					z.TC = new(TC)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "TC")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "TC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Round":
						z.TC.Round, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "TC", "Round")
							return
						}
					case "JointSignature":
						{
							var zb0005 []byte
							zb0005, err = dc.ReadBytes([]byte(z.TC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "TC", "JointSignature")
								return
							}
							z.TC.JointSignature = JointSignature(zb0005)
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "TC")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContentTimeout) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Round"
	err = en.Append(0x83, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Round)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	// write "HighQC"
	err = en.Append(0xa6, 0x48, 0x69, 0x67, 0x68, 0x51, 0x43)
	if err != nil {
		return
	}
	if z.HighQC == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "VoteData"
		err = en.Append(0x82, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61)
		if err != nil {
			return
		}
		err = z.HighQC.VoteData.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "HighQC", "VoteData")
			return
		}
		// write "JointSignature"
		err = en.Append(0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes([]byte(z.HighQC.JointSignature))
		if err != nil {
			err = msgp.WrapError(err, "HighQC", "JointSignature")
			return
		}
	}
	// write "TC"
	err = en.Append(0xa2, 0x54, 0x43)
	if err != nil {
		return
	}
	if z.TC == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Round"
		err = en.Append(0x82, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt(z.TC.Round)
		if err != nil {
			err = msgp.WrapError(err, "TC", "Round")
			return
		}
		// write "JointSignature"
		err = en.Append(0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes([]byte(z.TC.JointSignature))
		if err != nil {
			err = msgp.WrapError(err, "TC", "JointSignature")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContentTimeout) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Round"
	o = append(o, 0x83, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.Round)
	// string "HighQC"
	o = append(o, 0xa6, 0x48, 0x69, 0x67, 0x68, 0x51, 0x43)
	if z.HighQC == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "VoteData"
		o = append(o, 0x82, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61)
		o, err = z.HighQC.VoteData.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "HighQC", "VoteData")
			return
		}
		// string "JointSignature"
		o = append(o, 0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		o = msgp.AppendBytes(o, []byte(z.HighQC.JointSignature))
	}
	// string "TC"
	o = append(o, 0xa2, 0x54, 0x43)
	if z.TC == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Round"
		o = append(o, 0x82, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
		o = msgp.AppendInt(o, z.TC.Round)
		// string "JointSignature"
		o = append(o, 0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		o = msgp.AppendBytes(o, []byte(z.TC.JointSignature))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContentTimeout) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Round":
			z.Round, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		case "HighQC":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.HighQC = nil
			} else {
				if z.HighQC == nil {
					z.HighQC = new(QC)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HighQC")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "HighQC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "VoteData":
						bts, err = z.HighQC.VoteData.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "HighQC", "VoteData")
							return
						}
					case "JointSignature":
						{
							var zb0003 []byte
							zb0003, bts, err = msgp.ReadBytesBytes(bts, []byte(z.HighQC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "HighQC", "JointSignature")
								return
							}
							z.HighQC.JointSignature = JointSignature(zb0003)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "HighQC")
							return
						}
					}
				}
			}
		case "TC":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TC = nil
			} else {
				if z.TC == nil {
					z.TC = new(TC)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TC")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "TC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Round":
						z.TC.Round, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "TC", "Round")
							return
						}
					case "JointSignature":
						{
							var zb0005 []byte
							zb0005, bts, err = msgp.ReadBytesBytes(bts, []byte(z.TC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "TC", "JointSignature")
								return
							}
							z.TC.JointSignature = JointSignature(zb0005)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "TC")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContentTimeout) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 7
	if z.HighQC == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 9 + z.HighQC.VoteData.Msgsize() + 15 + msgp.BytesPrefixSize + len([]byte(z.HighQC.JointSignature))
	}
	s += 3
	if z.TC == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 6 + msgp.IntSize + 15 + msgp.BytesPrefixSize + len([]byte(z.TC.JointSignature))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContentVote) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "VoteInfo":
			err = z.VoteInfo.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "VoteInfo")
				return
			}
		case "LedgerCommitInfo":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "LedgerCommitInfo")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "LedgerCommitInfo")
					return
				}
				switch msgp.UnsafeString(field) {
				case "CommitStateId":
					z.LedgerCommitInfo.CommitStateId, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "LedgerCommitInfo", "CommitStateId")
						return
					}
				case "VoteInfoHash":
					z.LedgerCommitInfo.VoteInfoHash, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "LedgerCommitInfo", "VoteInfoHash")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "LedgerCommitInfo")
						return
					}
				}
			}
		case "QC":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "QC")
					return
				}
				z.QC = nil
			} else {
				if z.QC == nil {
					z.QC = new(QC)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "QC")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "QC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "VoteData":
						err = z.QC.VoteData.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "QC", "VoteData")
							return
						}
					case "JointSignature":
						{
							var zb0004 []byte
							zb0004, err = dc.ReadBytes([]byte(z.QC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "QC", "JointSignature")
								return
							}
							z.QC.JointSignature = JointSignature(zb0004)
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "QC")
							return
						}
					}
				}
			}
		case "TC":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TC")
					return
				}
				z.TC = nil
			} else {
				if z.TC == nil {
					z.TC = new(TC)
				}
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "TC")
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "TC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Round":
						z.TC.Round, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "TC", "Round")
							return
						}
					case "JointSignature":
						{
							var zb0006 []byte
							zb0006, err = dc.ReadBytes([]byte(z.TC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "TC", "JointSignature")
								return
							}
							z.TC.JointSignature = JointSignature(zb0006)
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "TC")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContentVote) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "VoteInfo"
	err = en.Append(0x84, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f)
	if err != nil {
		return
	}
	err = z.VoteInfo.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "VoteInfo")
		return
	}
	// write "LedgerCommitInfo"
	// map header, size 2
	// write "CommitStateId"
	err = en.Append(0xb0, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x82, 0xad, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.LedgerCommitInfo.CommitStateId)
	if err != nil {
		err = msgp.WrapError(err, "LedgerCommitInfo", "CommitStateId")
		return
	}
	// write "VoteInfoHash"
	err = en.Append(0xac, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.LedgerCommitInfo.VoteInfoHash)
	if err != nil {
		err = msgp.WrapError(err, "LedgerCommitInfo", "VoteInfoHash")
		return
	}
	// write "QC"
	err = en.Append(0xa2, 0x51, 0x43)
	if err != nil {
		return
	}
	if z.QC == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "VoteData"
		err = en.Append(0x82, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61)
		if err != nil {
			return
		}
		err = z.QC.VoteData.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "QC", "VoteData")
			return
		}
		// write "JointSignature"
		err = en.Append(0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes([]byte(z.QC.JointSignature))
		if err != nil {
			err = msgp.WrapError(err, "QC", "JointSignature")
			return
		}
	}
	// write "TC"
	err = en.Append(0xa2, 0x54, 0x43)
	if err != nil {
		return
	}
	if z.TC == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Round"
		err = en.Append(0x82, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt(z.TC.Round)
		if err != nil {
			err = msgp.WrapError(err, "TC", "Round")
			return
		}
		// write "JointSignature"
		err = en.Append(0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes([]byte(z.TC.JointSignature))
		if err != nil {
			err = msgp.WrapError(err, "TC", "JointSignature")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContentVote) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "VoteInfo"
	o = append(o, 0x84, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f)
	o, err = z.VoteInfo.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "VoteInfo")
		return
	}
	// string "LedgerCommitInfo"
	// map header, size 2
	// string "CommitStateId"
	o = append(o, 0xb0, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x82, 0xad, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.LedgerCommitInfo.CommitStateId)
	// string "VoteInfoHash"
	o = append(o, 0xac, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.LedgerCommitInfo.VoteInfoHash)
	// string "QC"
	o = append(o, 0xa2, 0x51, 0x43)
	if z.QC == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "VoteData"
		o = append(o, 0x82, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61)
		o, err = z.QC.VoteData.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "QC", "VoteData")
			return
		}
		// string "JointSignature"
		o = append(o, 0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		o = msgp.AppendBytes(o, []byte(z.QC.JointSignature))
	}
	// string "TC"
	o = append(o, 0xa2, 0x54, 0x43)
	if z.TC == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Round"
		o = append(o, 0x82, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
		o = msgp.AppendInt(o, z.TC.Round)
		// string "JointSignature"
		o = append(o, 0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
		o = msgp.AppendBytes(o, []byte(z.TC.JointSignature))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContentVote) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "VoteInfo":
			bts, err = z.VoteInfo.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "VoteInfo")
				return
			}
		case "LedgerCommitInfo":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LedgerCommitInfo")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "LedgerCommitInfo")
					return
				}
				switch msgp.UnsafeString(field) {
				case "CommitStateId":
					z.LedgerCommitInfo.CommitStateId, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LedgerCommitInfo", "CommitStateId")
						return
					}
				case "VoteInfoHash":
					z.LedgerCommitInfo.VoteInfoHash, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "LedgerCommitInfo", "VoteInfoHash")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "LedgerCommitInfo")
						return
					}
				}
			}
		case "QC":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.QC = nil
			} else {
				if z.QC == nil {
					z.QC = new(QC)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "QC")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "QC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "VoteData":
						bts, err = z.QC.VoteData.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "QC", "VoteData")
							return
						}
					case "JointSignature":
						{
							var zb0004 []byte
							zb0004, bts, err = msgp.ReadBytesBytes(bts, []byte(z.QC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "QC", "JointSignature")
								return
							}
							z.QC.JointSignature = JointSignature(zb0004)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "QC")
							return
						}
					}
				}
			}
		case "TC":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TC = nil
			} else {
				if z.TC == nil {
					z.TC = new(TC)
				}
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TC")
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "TC")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Round":
						z.TC.Round, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "TC", "Round")
							return
						}
					case "JointSignature":
						{
							var zb0006 []byte
							zb0006, bts, err = msgp.ReadBytesBytes(bts, []byte(z.TC.JointSignature))
							if err != nil {
								err = msgp.WrapError(err, "TC", "JointSignature")
								return
							}
							z.TC.JointSignature = JointSignature(zb0006)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "TC")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContentVote) Msgsize() (s int) {
	s = 1 + 9 + z.VoteInfo.Msgsize() + 17 + 1 + 14 + msgp.StringPrefixSize + len(z.LedgerCommitInfo.CommitStateId) + 13 + msgp.StringPrefixSize + len(z.LedgerCommitInfo.VoteInfoHash) + 3
	if z.QC == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 9 + z.QC.VoteData.Msgsize() + 15 + msgp.BytesPrefixSize + len([]byte(z.QC.JointSignature))
	}
	s += 3
	if z.TC == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 6 + msgp.IntSize + 15 + msgp.BytesPrefixSize + len([]byte(z.TC.JointSignature))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HotStuffMessageType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = HotStuffMessageType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z HotStuffMessageType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HotStuffMessageType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HotStuffMessageType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = HotStuffMessageType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HotStuffMessageType) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HotStuffSignedMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "HotStuffMessageType":
			z.HotStuffMessageType, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "HotStuffMessageType")
				return
			}
		case "ContentBytes":
			z.ContentBytes, err = dc.ReadBytes(z.ContentBytes)
			if err != nil {
				err = msgp.WrapError(err, "ContentBytes")
				return
			}
		case "SenderId":
			z.SenderId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SenderId")
				return
			}
		case "Signature":
			z.Signature, err = dc.ReadBytes(z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HotStuffSignedMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "HotStuffMessageType"
	err = en.Append(0x84, 0xb3, 0x48, 0x6f, 0x74, 0x53, 0x74, 0x75, 0x66, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.HotStuffMessageType)
	if err != nil {
		err = msgp.WrapError(err, "HotStuffMessageType")
		return
	}
	// write "ContentBytes"
	err = en.Append(0xac, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ContentBytes)
	if err != nil {
		err = msgp.WrapError(err, "ContentBytes")
		return
	}
	// write "SenderId"
	err = en.Append(0xa8, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.SenderId)
	if err != nil {
		err = msgp.WrapError(err, "SenderId")
		return
	}
	// write "Signature"
	err = en.Append(0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HotStuffSignedMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "HotStuffMessageType"
	o = append(o, 0x84, 0xb3, 0x48, 0x6f, 0x74, 0x53, 0x74, 0x75, 0x66, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.HotStuffMessageType)
	// string "ContentBytes"
	o = append(o, 0xac, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendBytes(o, z.ContentBytes)
	// string "SenderId"
	o = append(o, 0xa8, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64)
	o = msgp.AppendString(o, z.SenderId)
	// string "Signature"
	o = append(o, 0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o = msgp.AppendBytes(o, z.Signature)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HotStuffSignedMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "HotStuffMessageType":
			z.HotStuffMessageType, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HotStuffMessageType")
				return
			}
		case "ContentBytes":
			z.ContentBytes, bts, err = msgp.ReadBytesBytes(bts, z.ContentBytes)
			if err != nil {
				err = msgp.WrapError(err, "ContentBytes")
				return
			}
		case "SenderId":
			z.SenderId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SenderId")
				return
			}
		case "Signature":
			z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HotStuffSignedMessage) Msgsize() (s int) {
	s = 1 + 20 + msgp.IntSize + 13 + msgp.BytesPrefixSize + len(z.ContentBytes) + 9 + msgp.StringPrefixSize + len(z.SenderId) + 10 + msgp.BytesPrefixSize + len(z.Signature)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *JointSignature) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 []byte
		zb0001, err = dc.ReadBytes([]byte((*z)))
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = JointSignature(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z JointSignature) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteBytes([]byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z JointSignature) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *JointSignature) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 []byte
		zb0001, bts, err = msgp.ReadBytesBytes(bts, []byte((*z)))
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = JointSignature(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z JointSignature) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LedgerCommitInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CommitStateId":
			z.CommitStateId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CommitStateId")
				return
			}
		case "VoteInfoHash":
			z.VoteInfoHash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VoteInfoHash")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z LedgerCommitInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "CommitStateId"
	err = en.Append(0x82, 0xad, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.CommitStateId)
	if err != nil {
		err = msgp.WrapError(err, "CommitStateId")
		return
	}
	// write "VoteInfoHash"
	err = en.Append(0xac, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.VoteInfoHash)
	if err != nil {
		err = msgp.WrapError(err, "VoteInfoHash")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z LedgerCommitInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CommitStateId"
	o = append(o, 0x82, 0xad, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.CommitStateId)
	// string "VoteInfoHash"
	o = append(o, 0xac, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.VoteInfoHash)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LedgerCommitInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CommitStateId":
			z.CommitStateId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CommitStateId")
				return
			}
		case "VoteInfoHash":
			z.VoteInfoHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VoteInfoHash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z LedgerCommitInfo) Msgsize() (s int) {
	s = 1 + 14 + msgp.StringPrefixSize + len(z.CommitStateId) + 13 + msgp.StringPrefixSize + len(z.VoteInfoHash)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QC) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "VoteData":
			err = z.VoteData.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "VoteData")
				return
			}
		case "JointSignature":
			{
				var zb0002 []byte
				zb0002, err = dc.ReadBytes([]byte(z.JointSignature))
				if err != nil {
					err = msgp.WrapError(err, "JointSignature")
					return
				}
				z.JointSignature = JointSignature(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QC) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "VoteData"
	err = en.Append(0x82, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.VoteData.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "VoteData")
		return
	}
	// write "JointSignature"
	err = en.Append(0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes([]byte(z.JointSignature))
	if err != nil {
		err = msgp.WrapError(err, "JointSignature")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QC) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "VoteData"
	o = append(o, 0x82, 0xa8, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61)
	o, err = z.VoteData.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "VoteData")
		return
	}
	// string "JointSignature"
	o = append(o, 0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o = msgp.AppendBytes(o, []byte(z.JointSignature))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QC) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "VoteData":
			bts, err = z.VoteData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "VoteData")
				return
			}
		case "JointSignature":
			{
				var zb0002 []byte
				zb0002, bts, err = msgp.ReadBytesBytes(bts, []byte(z.JointSignature))
				if err != nil {
					err = msgp.WrapError(err, "JointSignature")
					return
				}
				z.JointSignature = JointSignature(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QC) Msgsize() (s int) {
	s = 1 + 9 + z.VoteData.Msgsize() + 15 + msgp.BytesPrefixSize + len([]byte(z.JointSignature))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Signature) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 []byte
		zb0001, err = dc.ReadBytes([]byte((*z)))
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Signature(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Signature) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteBytes([]byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Signature) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Signature) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 []byte
		zb0001, bts, err = msgp.ReadBytesBytes(bts, []byte((*z)))
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Signature(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Signature) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TC) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Round":
			z.Round, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		case "JointSignature":
			{
				var zb0002 []byte
				zb0002, err = dc.ReadBytes([]byte(z.JointSignature))
				if err != nil {
					err = msgp.WrapError(err, "JointSignature")
					return
				}
				z.JointSignature = JointSignature(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TC) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Round"
	err = en.Append(0x82, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Round)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	// write "JointSignature"
	err = en.Append(0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes([]byte(z.JointSignature))
	if err != nil {
		err = msgp.WrapError(err, "JointSignature")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TC) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Round"
	o = append(o, 0x82, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.Round)
	// string "JointSignature"
	o = append(o, 0xae, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o = msgp.AppendBytes(o, []byte(z.JointSignature))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TC) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Round":
			z.Round, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		case "JointSignature":
			{
				var zb0002 []byte
				zb0002, bts, err = msgp.ReadBytesBytes(bts, []byte(z.JointSignature))
				if err != nil {
					err = msgp.WrapError(err, "JointSignature")
					return
				}
				z.JointSignature = JointSignature(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TC) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 15 + msgp.BytesPrefixSize + len([]byte(z.JointSignature))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *VoteInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Round":
			z.Round, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		case "ParentId":
			z.ParentId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ParentId")
				return
			}
		case "ParentRound":
			z.ParentRound, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ParentRound")
				return
			}
		case "GrandParentId":
			z.GrandParentId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GrandParentId")
				return
			}
		case "GrandParentRound":
			z.GrandParentRound, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "GrandParentRound")
				return
			}
		case "ExecStateId":
			z.ExecStateId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ExecStateId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *VoteInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Id"
	err = en.Append(0x87, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Round"
	err = en.Append(0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Round)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	// write "ParentId"
	err = en.Append(0xa8, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ParentId)
	if err != nil {
		err = msgp.WrapError(err, "ParentId")
		return
	}
	// write "ParentRound"
	err = en.Append(0xab, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ParentRound)
	if err != nil {
		err = msgp.WrapError(err, "ParentRound")
		return
	}
	// write "GrandParentId"
	err = en.Append(0xad, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.GrandParentId)
	if err != nil {
		err = msgp.WrapError(err, "GrandParentId")
		return
	}
	// write "GrandParentRound"
	err = en.Append(0xb0, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.GrandParentRound)
	if err != nil {
		err = msgp.WrapError(err, "GrandParentRound")
		return
	}
	// write "ExecStateId"
	err = en.Append(0xab, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ExecStateId)
	if err != nil {
		err = msgp.WrapError(err, "ExecStateId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *VoteInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Id"
	o = append(o, 0x87, 0xa2, 0x49, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "Round"
	o = append(o, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.Round)
	// string "ParentId"
	o = append(o, 0xa8, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64)
	o = msgp.AppendString(o, z.ParentId)
	// string "ParentRound"
	o = append(o, 0xab, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.ParentRound)
	// string "GrandParentId"
	o = append(o, 0xad, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64)
	o = msgp.AppendString(o, z.GrandParentId)
	// string "GrandParentRound"
	o = append(o, 0xb0, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.GrandParentRound)
	// string "ExecStateId"
	o = append(o, 0xab, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.ExecStateId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VoteInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Round":
			z.Round, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		case "ParentId":
			z.ParentId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParentId")
				return
			}
		case "ParentRound":
			z.ParentRound, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParentRound")
				return
			}
		case "GrandParentId":
			z.GrandParentId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GrandParentId")
				return
			}
		case "GrandParentRound":
			z.GrandParentRound, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GrandParentRound")
				return
			}
		case "ExecStateId":
			z.ExecStateId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExecStateId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VoteInfo) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.Id) + 6 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.ParentId) + 12 + msgp.IntSize + 14 + msgp.StringPrefixSize + len(z.GrandParentId) + 17 + msgp.IntSize + 12 + msgp.StringPrefixSize + len(z.ExecStateId)
	return
}
