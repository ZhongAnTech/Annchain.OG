package message

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MessageContentResource) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ResourceType":
			{
				var zb0002 uint8
				zb0002, err = dc.ReadUint8()
				if err != nil {
					err = msgp.WrapError(err, "ResourceType")
					return
				}
				z.ResourceType = ResourceType(zb0002)
			}
		case "ResourceContent":
			z.ResourceContent, err = dc.ReadBytes(z.ResourceContent)
			if err != nil {
				err = msgp.WrapError(err, "ResourceContent")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageContentResource) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ResourceType"
	err = en.Append(0x82, 0xac, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint8(uint8(z.ResourceType))
	if err != nil {
		err = msgp.WrapError(err, "ResourceType")
		return
	}
	// write "ResourceContent"
	err = en.Append(0xaf, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ResourceContent)
	if err != nil {
		err = msgp.WrapError(err, "ResourceContent")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageContentResource) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ResourceType"
	o = append(o, 0x82, 0xac, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendUint8(o, uint8(z.ResourceType))
	// string "ResourceContent"
	o = append(o, 0xaf, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	o = msgp.AppendBytes(o, z.ResourceContent)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageContentResource) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ResourceType":
			{
				var zb0002 uint8
				zb0002, bts, err = msgp.ReadUint8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ResourceType")
					return
				}
				z.ResourceType = ResourceType(zb0002)
			}
		case "ResourceContent":
			z.ResourceContent, bts, err = msgp.ReadBytesBytes(bts, z.ResourceContent)
			if err != nil {
				err = msgp.WrapError(err, "ResourceContent")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageContentResource) Msgsize() (s int) {
	s = 1 + 13 + msgp.Uint8Size + 16 + msgp.BytesPrefixSize + len(z.ResourceContent)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageContentSequencer) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hash":
			z.Hash, err = dc.ReadBytes(z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "ParentsHash":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ParentsHash")
				return
			}
			if cap(z.ParentsHash) >= int(zb0002) {
				z.ParentsHash = (z.ParentsHash)[:zb0002]
			} else {
				z.ParentsHash = make([][]byte, zb0002)
			}
			for za0001 := range z.ParentsHash {
				z.ParentsHash[za0001], err = dc.ReadBytes(z.ParentsHash[za0001])
				if err != nil {
					err = msgp.WrapError(err, "ParentsHash", za0001)
					return
				}
			}
		case "MineNonce":
			z.MineNonce, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "MineNonce")
				return
			}
		case "AccountNonce":
			z.AccountNonce, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "AccountNonce")
				return
			}
		case "Issuer":
			z.Issuer, err = dc.ReadBytes(z.Issuer)
			if err != nil {
				err = msgp.WrapError(err, "Issuer")
				return
			}
		case "PublicKey":
			z.PublicKey, err = dc.ReadBytes(z.PublicKey)
			if err != nil {
				err = msgp.WrapError(err, "PublicKey")
				return
			}
		case "Signature":
			z.Signature, err = dc.ReadBytes(z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		case "StateRoot":
			z.StateRoot, err = dc.ReadBytes(z.StateRoot)
			if err != nil {
				err = msgp.WrapError(err, "StateRoot")
				return
			}
		case "Height":
			z.Height, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageContentSequencer) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "Hash"
	err = en.Append(0x89, 0xa4, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "ParentsHash"
	err = en.Append(0xab, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ParentsHash)))
	if err != nil {
		err = msgp.WrapError(err, "ParentsHash")
		return
	}
	for za0001 := range z.ParentsHash {
		err = en.WriteBytes(z.ParentsHash[za0001])
		if err != nil {
			err = msgp.WrapError(err, "ParentsHash", za0001)
			return
		}
	}
	// write "MineNonce"
	err = en.Append(0xa9, 0x4d, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.MineNonce)
	if err != nil {
		err = msgp.WrapError(err, "MineNonce")
		return
	}
	// write "AccountNonce"
	err = en.Append(0xac, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.AccountNonce)
	if err != nil {
		err = msgp.WrapError(err, "AccountNonce")
		return
	}
	// write "Issuer"
	err = en.Append(0xa6, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Issuer)
	if err != nil {
		err = msgp.WrapError(err, "Issuer")
		return
	}
	// write "PublicKey"
	err = en.Append(0xa9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	// write "Signature"
	err = en.Append(0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	// write "StateRoot"
	err = en.Append(0xa9, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.StateRoot)
	if err != nil {
		err = msgp.WrapError(err, "StateRoot")
		return
	}
	// write "Height"
	err = en.Append(0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageContentSequencer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "Hash"
	o = append(o, 0x89, 0xa4, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendBytes(o, z.Hash)
	// string "ParentsHash"
	o = append(o, 0xab, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ParentsHash)))
	for za0001 := range z.ParentsHash {
		o = msgp.AppendBytes(o, z.ParentsHash[za0001])
	}
	// string "MineNonce"
	o = append(o, 0xa9, 0x4d, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.MineNonce)
	// string "AccountNonce"
	o = append(o, 0xac, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.AccountNonce)
	// string "Issuer"
	o = append(o, 0xa6, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72)
	o = msgp.AppendBytes(o, z.Issuer)
	// string "PublicKey"
	o = append(o, 0xa9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.PublicKey)
	// string "Signature"
	o = append(o, 0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o = msgp.AppendBytes(o, z.Signature)
	// string "StateRoot"
	o = append(o, 0xa9, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	o = msgp.AppendBytes(o, z.StateRoot)
	// string "Height"
	o = append(o, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.Height)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageContentSequencer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hash":
			z.Hash, bts, err = msgp.ReadBytesBytes(bts, z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "ParentsHash":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParentsHash")
				return
			}
			if cap(z.ParentsHash) >= int(zb0002) {
				z.ParentsHash = (z.ParentsHash)[:zb0002]
			} else {
				z.ParentsHash = make([][]byte, zb0002)
			}
			for za0001 := range z.ParentsHash {
				z.ParentsHash[za0001], bts, err = msgp.ReadBytesBytes(bts, z.ParentsHash[za0001])
				if err != nil {
					err = msgp.WrapError(err, "ParentsHash", za0001)
					return
				}
			}
		case "MineNonce":
			z.MineNonce, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MineNonce")
				return
			}
		case "AccountNonce":
			z.AccountNonce, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccountNonce")
				return
			}
		case "Issuer":
			z.Issuer, bts, err = msgp.ReadBytesBytes(bts, z.Issuer)
			if err != nil {
				err = msgp.WrapError(err, "Issuer")
				return
			}
		case "PublicKey":
			z.PublicKey, bts, err = msgp.ReadBytesBytes(bts, z.PublicKey)
			if err != nil {
				err = msgp.WrapError(err, "PublicKey")
				return
			}
		case "Signature":
			z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		case "StateRoot":
			z.StateRoot, bts, err = msgp.ReadBytesBytes(bts, z.StateRoot)
			if err != nil {
				err = msgp.WrapError(err, "StateRoot")
				return
			}
		case "Height":
			z.Height, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageContentSequencer) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len(z.Hash) + 12 + msgp.ArrayHeaderSize
	for za0001 := range z.ParentsHash {
		s += msgp.BytesPrefixSize + len(z.ParentsHash[za0001])
	}
	s += 10 + msgp.Uint64Size + 13 + msgp.Uint64Size + 7 + msgp.BytesPrefixSize + len(z.Issuer) + 10 + msgp.BytesPrefixSize + len(z.PublicKey) + 10 + msgp.BytesPrefixSize + len(z.Signature) + 10 + msgp.BytesPrefixSize + len(z.StateRoot) + 7 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageContentTx) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hash":
			z.Hash, err = dc.ReadBytes(z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "ParentsHash":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ParentsHash")
				return
			}
			if cap(z.ParentsHash) >= int(zb0002) {
				z.ParentsHash = (z.ParentsHash)[:zb0002]
			} else {
				z.ParentsHash = make([][]byte, zb0002)
			}
			for za0001 := range z.ParentsHash {
				z.ParentsHash[za0001], err = dc.ReadBytes(z.ParentsHash[za0001])
				if err != nil {
					err = msgp.WrapError(err, "ParentsHash", za0001)
					return
				}
			}
		case "MineNonce":
			z.MineNonce, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "MineNonce")
				return
			}
		case "AccountNonce":
			z.AccountNonce, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "AccountNonce")
				return
			}
		case "From":
			z.From, err = dc.ReadBytes(z.From)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		case "To":
			z.To, err = dc.ReadBytes(z.To)
			if err != nil {
				err = msgp.WrapError(err, "To")
				return
			}
		case "Value":
			z.Value, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "TokenId":
			z.TokenId, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "TokenId")
				return
			}
		case "PublicKey":
			z.PublicKey, err = dc.ReadBytes(z.PublicKey)
			if err != nil {
				err = msgp.WrapError(err, "PublicKey")
				return
			}
		case "Data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "Signature":
			z.Signature, err = dc.ReadBytes(z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageContentTx) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "Hash"
	err = en.Append(0x8b, 0xa4, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "ParentsHash"
	err = en.Append(0xab, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ParentsHash)))
	if err != nil {
		err = msgp.WrapError(err, "ParentsHash")
		return
	}
	for za0001 := range z.ParentsHash {
		err = en.WriteBytes(z.ParentsHash[za0001])
		if err != nil {
			err = msgp.WrapError(err, "ParentsHash", za0001)
			return
		}
	}
	// write "MineNonce"
	err = en.Append(0xa9, 0x4d, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.MineNonce)
	if err != nil {
		err = msgp.WrapError(err, "MineNonce")
		return
	}
	// write "AccountNonce"
	err = en.Append(0xac, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.AccountNonce)
	if err != nil {
		err = msgp.WrapError(err, "AccountNonce")
		return
	}
	// write "From"
	err = en.Append(0xa4, 0x46, 0x72, 0x6f, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.From)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	// write "To"
	err = en.Append(0xa2, 0x54, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.To)
	if err != nil {
		err = msgp.WrapError(err, "To")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	// write "TokenId"
	err = en.Append(0xa7, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.TokenId)
	if err != nil {
		err = msgp.WrapError(err, "TokenId")
		return
	}
	// write "PublicKey"
	err = en.Append(0xa9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	// write "Data"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "Signature"
	err = en.Append(0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageContentTx) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "Hash"
	o = append(o, 0x8b, 0xa4, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendBytes(o, z.Hash)
	// string "ParentsHash"
	o = append(o, 0xab, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ParentsHash)))
	for za0001 := range z.ParentsHash {
		o = msgp.AppendBytes(o, z.ParentsHash[za0001])
	}
	// string "MineNonce"
	o = append(o, 0xa9, 0x4d, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.MineNonce)
	// string "AccountNonce"
	o = append(o, 0xac, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.AccountNonce)
	// string "From"
	o = append(o, 0xa4, 0x46, 0x72, 0x6f, 0x6d)
	o = msgp.AppendBytes(o, z.From)
	// string "To"
	o = append(o, 0xa2, 0x54, 0x6f)
	o = msgp.AppendBytes(o, z.To)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendString(o, z.Value)
	// string "TokenId"
	o = append(o, 0xa7, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64)
	o = msgp.AppendInt32(o, z.TokenId)
	// string "PublicKey"
	o = append(o, 0xa9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.PublicKey)
	// string "Data"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	// string "Signature"
	o = append(o, 0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o = msgp.AppendBytes(o, z.Signature)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageContentTx) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hash":
			z.Hash, bts, err = msgp.ReadBytesBytes(bts, z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "ParentsHash":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParentsHash")
				return
			}
			if cap(z.ParentsHash) >= int(zb0002) {
				z.ParentsHash = (z.ParentsHash)[:zb0002]
			} else {
				z.ParentsHash = make([][]byte, zb0002)
			}
			for za0001 := range z.ParentsHash {
				z.ParentsHash[za0001], bts, err = msgp.ReadBytesBytes(bts, z.ParentsHash[za0001])
				if err != nil {
					err = msgp.WrapError(err, "ParentsHash", za0001)
					return
				}
			}
		case "MineNonce":
			z.MineNonce, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MineNonce")
				return
			}
		case "AccountNonce":
			z.AccountNonce, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccountNonce")
				return
			}
		case "From":
			z.From, bts, err = msgp.ReadBytesBytes(bts, z.From)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		case "To":
			z.To, bts, err = msgp.ReadBytesBytes(bts, z.To)
			if err != nil {
				err = msgp.WrapError(err, "To")
				return
			}
		case "Value":
			z.Value, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "TokenId":
			z.TokenId, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TokenId")
				return
			}
		case "PublicKey":
			z.PublicKey, bts, err = msgp.ReadBytesBytes(bts, z.PublicKey)
			if err != nil {
				err = msgp.WrapError(err, "PublicKey")
				return
			}
		case "Data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "Signature":
			z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageContentTx) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len(z.Hash) + 12 + msgp.ArrayHeaderSize
	for za0001 := range z.ParentsHash {
		s += msgp.BytesPrefixSize + len(z.ParentsHash[za0001])
	}
	s += 10 + msgp.Uint64Size + 13 + msgp.Uint64Size + 5 + msgp.BytesPrefixSize + len(z.From) + 3 + msgp.BytesPrefixSize + len(z.To) + 6 + msgp.StringPrefixSize + len(z.Value) + 8 + msgp.Int32Size + 10 + msgp.BytesPrefixSize + len(z.PublicKey) + 5 + msgp.BytesPrefixSize + len(z.Data) + 10 + msgp.BytesPrefixSize + len(z.Signature)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ResourceType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ResourceType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ResourceType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ResourceType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResourceType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ResourceType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ResourceType) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}
