package vss

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/annchain/OG/common/crypto/dedis/kyber/v3"
	"github.com/annchain/OG/common/crypto/dedis/kyber/v3/share"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Aggregator) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Aggregator) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Aggregator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Aggregator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Aggregator) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Deal) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "SessionID":
			z.SessionID, err = dc.ReadBytes(z.SessionID)
			if err != nil {
				return
			}
		case "SecShare":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.SecShare = nil
			} else {
				if z.SecShare == nil {
					z.SecShare = new(share.PriShare)
				}
				err = z.SecShare.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "T":
			z.T, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "Commitments":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Commitments) >= int(zb0002) {
				z.Commitments = (z.Commitments)[:zb0002]
			} else {
				z.Commitments = make([]kyber.Point, zb0002)
			}
			for za0001 := range z.Commitments {
				err = z.Commitments[za0001].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Deal) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "SessionID"
	err = en.Append(0x84, 0xa9, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.SessionID)
	if err != nil {
		return
	}
	// write "SecShare"
	err = en.Append(0xa8, 0x53, 0x65, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65)
	if err != nil {
		return
	}
	if z.SecShare == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.SecShare.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "T"
	err = en.Append(0xa1, 0x54)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.T)
	if err != nil {
		return
	}
	// write "Commitments"
	err = en.Append(0xab, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Commitments)))
	if err != nil {
		return
	}
	for za0001 := range z.Commitments {
		err = z.Commitments[za0001].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Deal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "SessionID"
	o = append(o, 0x84, 0xa9, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendBytes(o, z.SessionID)
	// string "SecShare"
	o = append(o, 0xa8, 0x53, 0x65, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65)
	if z.SecShare == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.SecShare.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "T"
	o = append(o, 0xa1, 0x54)
	o = msgp.AppendUint32(o, z.T)
	// string "Commitments"
	o = append(o, 0xab, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Commitments)))
	for za0001 := range z.Commitments {
		o, err = z.Commitments[za0001].MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Deal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "SessionID":
			z.SessionID, bts, err = msgp.ReadBytesBytes(bts, z.SessionID)
			if err != nil {
				return
			}
		case "SecShare":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SecShare = nil
			} else {
				if z.SecShare == nil {
					z.SecShare = new(share.PriShare)
				}
				bts, err = z.SecShare.UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "T":
			z.T, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "Commitments":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Commitments) >= int(zb0002) {
				z.Commitments = (z.Commitments)[:zb0002]
			} else {
				z.Commitments = make([]kyber.Point, zb0002)
			}
			for za0001 := range z.Commitments {
				bts, err = z.Commitments[za0001].UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Deal) Msgsize() (s int) {
	s = 1 + 10 + msgp.BytesPrefixSize + len(z.SessionID) + 9
	if z.SecShare == nil {
		s += msgp.NilSize
	} else {
		s += z.SecShare.Msgsize()
	}
	s += 2 + msgp.Uint32Size + 12 + msgp.ArrayHeaderSize
	for za0001 := range z.Commitments {
		s += z.Commitments[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Dealer) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Aggregator":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Aggregator = nil
			} else {
				if z.Aggregator == nil {
					z.Aggregator = new(Aggregator)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Dealer) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Aggregator"
	err = en.Append(0x81, 0xaa, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	if z.Aggregator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 0
		err = en.Append(0x80)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Dealer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Aggregator"
	o = append(o, 0x81, 0xaa, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72)
	if z.Aggregator == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 0
		o = append(o, 0x80)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Dealer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Aggregator":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Aggregator = nil
			} else {
				if z.Aggregator == nil {
					z.Aggregator = new(Aggregator)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Dealer) Msgsize() (s int) {
	s = 1 + 11
	if z.Aggregator == nil {
		s += msgp.NilSize
	} else {
		s += 1
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EncryptedDeal) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "DHKey":
			z.DHKey, err = dc.ReadBytes(z.DHKey)
			if err != nil {
				return
			}
		case "Signature":
			z.Signature, err = dc.ReadBytes(z.Signature)
			if err != nil {
				return
			}
		case "Nonce":
			z.Nonce, err = dc.ReadBytes(z.Nonce)
			if err != nil {
				return
			}
		case "Cipher":
			z.Cipher, err = dc.ReadBytes(z.Cipher)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EncryptedDeal) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "DHKey"
	err = en.Append(0x84, 0xa5, 0x44, 0x48, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.DHKey)
	if err != nil {
		return
	}
	// write "Signature"
	err = en.Append(0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		return
	}
	// write "Nonce"
	err = en.Append(0xa5, 0x4e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Nonce)
	if err != nil {
		return
	}
	// write "Cipher"
	err = en.Append(0xa6, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Cipher)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EncryptedDeal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "DHKey"
	o = append(o, 0x84, 0xa5, 0x44, 0x48, 0x4b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.DHKey)
	// string "Signature"
	o = append(o, 0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o = msgp.AppendBytes(o, z.Signature)
	// string "Nonce"
	o = append(o, 0xa5, 0x4e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendBytes(o, z.Nonce)
	// string "Cipher"
	o = append(o, 0xa6, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72)
	o = msgp.AppendBytes(o, z.Cipher)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EncryptedDeal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "DHKey":
			z.DHKey, bts, err = msgp.ReadBytesBytes(bts, z.DHKey)
			if err != nil {
				return
			}
		case "Signature":
			z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
			if err != nil {
				return
			}
		case "Nonce":
			z.Nonce, bts, err = msgp.ReadBytesBytes(bts, z.Nonce)
			if err != nil {
				return
			}
		case "Cipher":
			z.Cipher, bts, err = msgp.ReadBytesBytes(bts, z.Cipher)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EncryptedDeal) Msgsize() (s int) {
	s = 1 + 6 + msgp.BytesPrefixSize + len(z.DHKey) + 10 + msgp.BytesPrefixSize + len(z.Signature) + 6 + msgp.BytesPrefixSize + len(z.Nonce) + 7 + msgp.BytesPrefixSize + len(z.Cipher)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Justification) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "SessionID":
			z.SessionID, err = dc.ReadBytes(z.SessionID)
			if err != nil {
				return
			}
		case "Index":
			z.Index, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "Deal":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Deal = nil
			} else {
				if z.Deal == nil {
					z.Deal = new(Deal)
				}
				err = z.Deal.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Signature":
			z.Signature, err = dc.ReadBytes(z.Signature)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Justification) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "SessionID"
	err = en.Append(0x84, 0xa9, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.SessionID)
	if err != nil {
		return
	}
	// write "Index"
	err = en.Append(0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Index)
	if err != nil {
		return
	}
	// write "Deal"
	err = en.Append(0xa4, 0x44, 0x65, 0x61, 0x6c)
	if err != nil {
		return
	}
	if z.Deal == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Deal.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "Signature"
	err = en.Append(0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Justification) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "SessionID"
	o = append(o, 0x84, 0xa9, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendBytes(o, z.SessionID)
	// string "Index"
	o = append(o, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint32(o, z.Index)
	// string "Deal"
	o = append(o, 0xa4, 0x44, 0x65, 0x61, 0x6c)
	if z.Deal == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Deal.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "Signature"
	o = append(o, 0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o = msgp.AppendBytes(o, z.Signature)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Justification) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "SessionID":
			z.SessionID, bts, err = msgp.ReadBytesBytes(bts, z.SessionID)
			if err != nil {
				return
			}
		case "Index":
			z.Index, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "Deal":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Deal = nil
			} else {
				if z.Deal == nil {
					z.Deal = new(Deal)
				}
				bts, err = z.Deal.UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "Signature":
			z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Justification) Msgsize() (s int) {
	s = 1 + 10 + msgp.BytesPrefixSize + len(z.SessionID) + 6 + msgp.Uint32Size + 5
	if z.Deal == nil {
		s += msgp.NilSize
	} else {
		s += z.Deal.Msgsize()
	}
	s += 10 + msgp.BytesPrefixSize + len(z.Signature)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Response) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "SessionID":
			z.SessionID, err = dc.ReadBytes(z.SessionID)
			if err != nil {
				return
			}
		case "Index":
			z.Index, err = dc.ReadUint32()
			if err != nil {
				return
			}
		case "Status":
			z.Status, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Signature":
			z.Signature, err = dc.ReadBytes(z.Signature)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Response) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "SessionID"
	err = en.Append(0x84, 0xa9, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.SessionID)
	if err != nil {
		return
	}
	// write "Index"
	err = en.Append(0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Index)
	if err != nil {
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Status)
	if err != nil {
		return
	}
	// write "Signature"
	err = en.Append(0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Response) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "SessionID"
	o = append(o, 0x84, 0xa9, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendBytes(o, z.SessionID)
	// string "Index"
	o = append(o, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint32(o, z.Index)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendBool(o, z.Status)
	// string "Signature"
	o = append(o, 0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o = msgp.AppendBytes(o, z.Signature)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Response) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "SessionID":
			z.SessionID, bts, err = msgp.ReadBytesBytes(bts, z.SessionID)
			if err != nil {
				return
			}
		case "Index":
			z.Index, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "Status":
			z.Status, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				return
			}
		case "Signature":
			z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Response) Msgsize() (s int) {
	s = 1 + 10 + msgp.BytesPrefixSize + len(z.SessionID) + 6 + msgp.Uint32Size + 7 + msgp.BoolSize + 10 + msgp.BytesPrefixSize + len(z.Signature)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Verifier) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Aggregator":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Aggregator = nil
			} else {
				if z.Aggregator == nil {
					z.Aggregator = new(Aggregator)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Verifier) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Aggregator"
	err = en.Append(0x81, 0xaa, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	if z.Aggregator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 0
		err = en.Append(0x80)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Verifier) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Aggregator"
	o = append(o, 0x81, 0xaa, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72)
	if z.Aggregator == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 0
		o = append(o, 0x80)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Verifier) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Aggregator":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Aggregator = nil
			} else {
				if z.Aggregator == nil {
					z.Aggregator = new(Aggregator)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Verifier) Msgsize() (s int) {
	s = 1 + 11
	if z.Aggregator == nil {
		s += msgp.NilSize
	} else {
		s += 1
	}
	return
}
