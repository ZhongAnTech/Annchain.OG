package vss

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Aggregator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Aggregator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 0
	err = en.Append(0x90)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Aggregator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 0
	o = append(o, 0x90)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Aggregator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Aggregator) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Deal) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.SessionID, err = dc.ReadBytes(z.SessionID)
	if err != nil {
		return
	}
	z.T, err = dc.ReadUint32()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Deal) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.SessionID)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.T)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Deal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendBytes(o, z.SessionID)
	o = msgp.AppendUint32(o, z.T)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Deal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.SessionID, bts, err = msgp.ReadBytesBytes(bts, z.SessionID)
	if err != nil {
		return
	}
	z.T, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Deal) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len(z.SessionID) + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Dealer) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Aggregator = nil
	} else {
		if z.Aggregator == nil {
			z.Aggregator = new(Aggregator)
		}
		var zb0002 uint32
		zb0002, err = dc.ReadArrayHeader()
		if err != nil {
			return
		}
		if zb0002 != 0 {
			err = msgp.ArrayError{Wanted: 0, Got: zb0002}
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Dealer) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	if z.Aggregator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 0
		err = en.Append(0x90)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Dealer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	if z.Aggregator == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 0
		o = append(o, 0x90)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Dealer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Aggregator = nil
	} else {
		if z.Aggregator == nil {
			z.Aggregator = new(Aggregator)
		}
		var zb0002 uint32
		zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			return
		}
		if zb0002 != 0 {
			err = msgp.ArrayError{Wanted: 0, Got: zb0002}
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Dealer) Msgsize() (s int) {
	s = 1
	if z.Aggregator == nil {
		s += msgp.NilSize
	} else {
		s += 1
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EncryptedDeal) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.DHKey, err = dc.ReadBytes(z.DHKey)
	if err != nil {
		return
	}
	z.Signature, err = dc.ReadBytes(z.Signature)
	if err != nil {
		return
	}
	z.Nonce, err = dc.ReadBytes(z.Nonce)
	if err != nil {
		return
	}
	z.Cipher, err = dc.ReadBytes(z.Cipher)
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EncryptedDeal) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.DHKey)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Nonce)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Cipher)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EncryptedDeal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendBytes(o, z.DHKey)
	o = msgp.AppendBytes(o, z.Signature)
	o = msgp.AppendBytes(o, z.Nonce)
	o = msgp.AppendBytes(o, z.Cipher)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EncryptedDeal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.DHKey, bts, err = msgp.ReadBytesBytes(bts, z.DHKey)
	if err != nil {
		return
	}
	z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
	if err != nil {
		return
	}
	z.Nonce, bts, err = msgp.ReadBytesBytes(bts, z.Nonce)
	if err != nil {
		return
	}
	z.Cipher, bts, err = msgp.ReadBytesBytes(bts, z.Cipher)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EncryptedDeal) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len(z.DHKey) + msgp.BytesPrefixSize + len(z.Signature) + msgp.BytesPrefixSize + len(z.Nonce) + msgp.BytesPrefixSize + len(z.Cipher)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Justification) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.SessionID, err = dc.ReadBytes(z.SessionID)
	if err != nil {
		return
	}
	z.Index, err = dc.ReadUint32()
	if err != nil {
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Deal = nil
	} else {
		if z.Deal == nil {
			z.Deal = new(Deal)
		}
		var zb0002 uint32
		zb0002, err = dc.ReadArrayHeader()
		if err != nil {
			return
		}
		if zb0002 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0002}
			return
		}
		z.Deal.SessionID, err = dc.ReadBytes(z.Deal.SessionID)
		if err != nil {
			return
		}
		z.Deal.T, err = dc.ReadUint32()
		if err != nil {
			return
		}
	}
	z.Signature, err = dc.ReadBytes(z.Signature)
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Justification) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.SessionID)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Index)
	if err != nil {
		return
	}
	if z.Deal == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Deal.SessionID)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.Deal.T)
		if err != nil {
			return
		}
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Justification) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendBytes(o, z.SessionID)
	o = msgp.AppendUint32(o, z.Index)
	if z.Deal == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 2
		o = append(o, 0x92)
		o = msgp.AppendBytes(o, z.Deal.SessionID)
		o = msgp.AppendUint32(o, z.Deal.T)
	}
	o = msgp.AppendBytes(o, z.Signature)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Justification) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.SessionID, bts, err = msgp.ReadBytesBytes(bts, z.SessionID)
	if err != nil {
		return
	}
	z.Index, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Deal = nil
	} else {
		if z.Deal == nil {
			z.Deal = new(Deal)
		}
		var zb0002 uint32
		zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			return
		}
		if zb0002 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0002}
			return
		}
		z.Deal.SessionID, bts, err = msgp.ReadBytesBytes(bts, z.Deal.SessionID)
		if err != nil {
			return
		}
		z.Deal.T, bts, err = msgp.ReadUint32Bytes(bts)
		if err != nil {
			return
		}
	}
	z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Justification) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len(z.SessionID) + msgp.Uint32Size
	if z.Deal == nil {
		s += msgp.NilSize
	} else {
		s += 1 + msgp.BytesPrefixSize + len(z.Deal.SessionID) + msgp.Uint32Size
	}
	s += msgp.BytesPrefixSize + len(z.Signature)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Response) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.SessionID, err = dc.ReadBytes(z.SessionID)
	if err != nil {
		return
	}
	z.Index, err = dc.ReadUint32()
	if err != nil {
		return
	}
	z.Status, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.Signature, err = dc.ReadBytes(z.Signature)
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Response) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.SessionID)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Index)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Status)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Response) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendBytes(o, z.SessionID)
	o = msgp.AppendUint32(o, z.Index)
	o = msgp.AppendBool(o, z.Status)
	o = msgp.AppendBytes(o, z.Signature)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Response) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.SessionID, bts, err = msgp.ReadBytesBytes(bts, z.SessionID)
	if err != nil {
		return
	}
	z.Index, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	z.Status, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		return
	}
	z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Response) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len(z.SessionID) + msgp.Uint32Size + msgp.BoolSize + msgp.BytesPrefixSize + len(z.Signature)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Verifier) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Aggregator":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Aggregator = nil
			} else {
				if z.Aggregator == nil {
					z.Aggregator = new(Aggregator)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadArrayHeader()
				if err != nil {
					return
				}
				if zb0002 != 0 {
					err = msgp.ArrayError{Wanted: 0, Got: zb0002}
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Verifier) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Aggregator"
	err = en.Append(0x81, 0xaa, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	if z.Aggregator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 0
		err = en.Append(0x90)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Verifier) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Aggregator"
	o = append(o, 0x81, 0xaa, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72)
	if z.Aggregator == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 0
		o = append(o, 0x90)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Verifier) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Aggregator":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Aggregator = nil
			} else {
				if z.Aggregator == nil {
					z.Aggregator = new(Aggregator)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if zb0002 != 0 {
					err = msgp.ArrayError{Wanted: 0, Got: zb0002}
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Verifier) Msgsize() (s int) {
	s = 1 + 11
	if z.Aggregator == nil {
		s += msgp.NilSize
	} else {
		s += 1
	}
	return
}
