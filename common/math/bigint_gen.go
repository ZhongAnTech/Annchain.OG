// Copyright Â© 2019 Annchain Authors <EMAIL ADDRESS>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package math

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
	"math/big"
)

// DecodeMsg implements msgp.Decodable
func (z *BigInt) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	sign, err := dc.ReadBool()
	if err != nil {
		return
	}

	bytes, err := dc.ReadBytes([]byte{})
	if err != nil {
		return
	}
	z.Value = big.NewInt(0).SetBytes(bytes)
	if !sign {
		z.Value = z.Value.Neg(z.Value)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BigInt) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Value.Sign() > 0)
	err = en.WriteBytes(z.Value.Bytes())
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BigInt) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendBool(o, z.Sign() > 0)
	o = msgp.AppendBytes(o, z.Value.Bytes())
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BigInt) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	sign, bts, err := msgp.ReadBoolBytes(bts)
	if err != nil {
		return
	}
	bytes, bts, err := msgp.ReadBytesBytes(bts, []byte{})
	if err != nil {
		return
	}
	z.Value = big.NewInt(0).SetBytes(bytes)
	if !sign {
		z.Value = z.Value.Neg(z.Value)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BigInt) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + 1 + len(z.Value.Bytes())
	return
}
