package annsensus

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AnnsensusMessageEncrypted) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	err = z.InnerMessageType.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageType")
		return
	}
	z.InnerMessageEncrypted, err = dc.ReadBytes(z.InnerMessageEncrypted)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageEncrypted")
		return
	}
	err = z.PublicKey.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AnnsensusMessageEncrypted) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = z.InnerMessageType.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageType")
		return
	}
	err = en.WriteBytes(z.InnerMessageEncrypted)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageEncrypted")
		return
	}
	err = z.PublicKey.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AnnsensusMessageEncrypted) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o, err = z.InnerMessageType.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageType")
		return
	}
	o = msgp.AppendBytes(o, z.InnerMessageEncrypted)
	o, err = z.PublicKey.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AnnsensusMessageEncrypted) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	bts, err = z.InnerMessageType.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageType")
		return
	}
	z.InnerMessageEncrypted, bts, err = msgp.ReadBytesBytes(bts, z.InnerMessageEncrypted)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageEncrypted")
		return
	}
	bts, err = z.PublicKey.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AnnsensusMessageEncrypted) Msgsize() (s int) {
	s = 1 + z.InnerMessageType.Msgsize() + msgp.BytesPrefixSize + len(z.InnerMessageEncrypted) + z.PublicKey.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AnnsensusMessagePlain) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err, "InnerMessageType")
			return
		}
		z.InnerMessageType = AnnsensusMessageType(zb0002)
	}
	z.InnerMessage, err = dc.ReadBytes(z.InnerMessage)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessage")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AnnsensusMessagePlain) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteUint16(uint16(z.InnerMessageType))
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageType")
		return
	}
	err = en.WriteBytes(z.InnerMessage)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessage")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AnnsensusMessagePlain) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendUint16(o, uint16(z.InnerMessageType))
	o = msgp.AppendBytes(o, z.InnerMessage)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AnnsensusMessagePlain) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "InnerMessageType")
			return
		}
		z.InnerMessageType = AnnsensusMessageType(zb0002)
	}
	z.InnerMessage, bts, err = msgp.ReadBytesBytes(bts, z.InnerMessage)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessage")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AnnsensusMessagePlain) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + msgp.BytesPrefixSize + len(z.InnerMessage)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AnnsensusMessageSigned) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err, "InnerMessageType")
			return
		}
		z.InnerMessageType = AnnsensusMessageType(zb0002)
	}
	z.InnerMessage, err = dc.ReadBytes(z.InnerMessage)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessage")
		return
	}
	err = z.Signature.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	err = z.PublicKey.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	z.TermId, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "TermId")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AnnsensusMessageSigned) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = en.WriteUint16(uint16(z.InnerMessageType))
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageType")
		return
	}
	err = en.WriteBytes(z.InnerMessage)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessage")
		return
	}
	err = z.Signature.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	err = z.PublicKey.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	err = en.WriteUint32(z.TermId)
	if err != nil {
		err = msgp.WrapError(err, "TermId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AnnsensusMessageSigned) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o = msgp.AppendUint16(o, uint16(z.InnerMessageType))
	o = msgp.AppendBytes(o, z.InnerMessage)
	o, err = z.Signature.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	o, err = z.PublicKey.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	o = msgp.AppendUint32(o, z.TermId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AnnsensusMessageSigned) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "InnerMessageType")
			return
		}
		z.InnerMessageType = AnnsensusMessageType(zb0002)
	}
	z.InnerMessage, bts, err = msgp.ReadBytesBytes(bts, z.InnerMessage)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessage")
		return
	}
	bts, err = z.Signature.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	bts, err = z.PublicKey.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	z.TermId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TermId")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AnnsensusMessageSigned) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + msgp.BytesPrefixSize + len(z.InnerMessage) + z.Signature.Msgsize() + z.PublicKey.Msgsize() + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AnnsensusMessageType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint16
		zb0001, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = AnnsensusMessageType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AnnsensusMessageType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint16(uint16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AnnsensusMessageType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint16(o, uint16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AnnsensusMessageType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint16
		zb0001, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = AnnsensusMessageType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AnnsensusMessageType) Msgsize() (s int) {
	s = msgp.Uint16Size
	return
}
