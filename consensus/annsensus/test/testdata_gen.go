package test

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TestMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	err = z.Message.DecodeMsg(dc)
	if err != nil {
		return
	}
	err = z.MessageType.DecodeMsg(dc)
	if err != nil {
		return
	}
	err = z.From.DecodeMsg(dc)
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TestMsg) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = z.Message.EncodeMsg(en)
	if err != nil {
		return
	}
	err = z.MessageType.EncodeMsg(en)
	if err != nil {
		return
	}
	err = z.From.EncodeMsg(en)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TestMsg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o, err = z.Message.MarshalMsg(o)
	if err != nil {
		return
	}
	o, err = z.MessageType.MarshalMsg(o)
	if err != nil {
		return
	}
	o, err = z.From.MarshalMsg(o)
	if err != nil {
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TestMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	bts, err = z.Message.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	bts, err = z.MessageType.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	bts, err = z.From.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TestMsg) Msgsize() (s int) {
	s = 1 + z.Message.Msgsize() + z.MessageType.Msgsize() + z.From.Msgsize()
	return
}
