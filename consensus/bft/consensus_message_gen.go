package bft

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/annchain/OG/common"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BasicMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.SourceId, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "SourceId")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "HeightRound")
		return
	}
	if zb0002 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0002}
		return
	}
	z.HeightRound.Height, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "HeightRound", "Height")
		return
	}
	z.HeightRound.Round, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "HeightRound", "Round")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BasicMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.SourceId)
	if err != nil {
		err = msgp.WrapError(err, "SourceId")
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.HeightRound.Height)
	if err != nil {
		err = msgp.WrapError(err, "HeightRound", "Height")
		return
	}
	err = en.WriteInt(z.HeightRound.Round)
	if err != nil {
		err = msgp.WrapError(err, "HeightRound", "Round")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BasicMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendUint16(o, z.SourceId)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendUint64(o, z.HeightRound.Height)
	o = msgp.AppendInt(o, z.HeightRound.Round)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BasicMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.SourceId, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SourceId")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "HeightRound")
		return
	}
	if zb0002 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0002}
		return
	}
	z.HeightRound.Height, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "HeightRound", "Height")
		return
	}
	z.HeightRound.Round, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "HeightRound", "Round")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BasicMessage) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + 1 + msgp.Uint64Size + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HeightRound) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Height, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	z.Round, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z HeightRound) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	err = en.WriteInt(z.Round)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HeightRound) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendUint64(o, z.Height)
	o = msgp.AppendInt(o, z.Round)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HeightRound) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Height, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	z.Round, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HeightRound) Msgsize() (s int) {
	s = 1 + msgp.Uint64Size + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessagePreCommit) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	err = z.BasicMessage.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Idv")
			return
		}
		z.Idv = nil
	} else {
		if z.Idv == nil {
			z.Idv = new(common.Hash)
		}
		err = z.Idv.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Idv")
			return
		}
	}
	err = z.BlsSignature.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "BlsSignature")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessagePreCommit) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = z.BasicMessage.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	if z.Idv == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Idv.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Idv")
			return
		}
	}
	err = z.BlsSignature.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BlsSignature")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessagePreCommit) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o, err = z.BasicMessage.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	if z.Idv == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Idv.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Idv")
			return
		}
	}
	o, err = z.BlsSignature.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BlsSignature")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessagePreCommit) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	bts, err = z.BasicMessage.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Idv = nil
	} else {
		if z.Idv == nil {
			z.Idv = new(common.Hash)
		}
		bts, err = z.Idv.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Idv")
			return
		}
	}
	bts, err = z.BlsSignature.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "BlsSignature")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessagePreCommit) Msgsize() (s int) {
	s = 1 + z.BasicMessage.Msgsize()
	if z.Idv == nil {
		s += msgp.NilSize
	} else {
		s += z.Idv.Msgsize()
	}
	s += z.BlsSignature.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessagePreVote) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	err = z.BasicMessage.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Idv")
			return
		}
		z.Idv = nil
	} else {
		if z.Idv == nil {
			z.Idv = new(common.Hash)
		}
		err = z.Idv.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Idv")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessagePreVote) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = z.BasicMessage.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	if z.Idv == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Idv.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Idv")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessagePreVote) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o, err = z.BasicMessage.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	if z.Idv == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Idv.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Idv")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessagePreVote) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	bts, err = z.BasicMessage.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Idv = nil
	} else {
		if z.Idv == nil {
			z.Idv = new(common.Hash)
		}
		bts, err = z.Idv.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Idv")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessagePreVote) Msgsize() (s int) {
	s = 1 + z.BasicMessage.Msgsize()
	if z.Idv == nil {
		s += msgp.NilSize
	} else {
		s += z.Idv.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageProposal) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	err = z.BasicMessage.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	err = z.Value.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	z.ValidRound, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "ValidRound")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageProposal) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = z.BasicMessage.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	err = z.Value.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	err = en.WriteInt(z.ValidRound)
	if err != nil {
		err = msgp.WrapError(err, "ValidRound")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageProposal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o, err = z.BasicMessage.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	o, err = z.Value.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	o = msgp.AppendInt(o, z.ValidRound)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageProposal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	bts, err = z.BasicMessage.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "BasicMessage")
		return
	}
	bts, err = z.Value.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	z.ValidRound, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ValidRound")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageProposal) Msgsize() (s int) {
	s = 1 + z.BasicMessage.Msgsize() + z.Value.Msgsize() + msgp.IntSize
	return
}
