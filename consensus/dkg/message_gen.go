package dkg

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DkgMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err, "Type")
			return
		}
		z.Type = DkgMessageType(zb0002)
	}
	err = z.Payload.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DkgMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteUint16(uint16(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	err = z.Payload.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DkgMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendUint16(o, uint16(z.Type))
	o, err = z.Payload.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DkgMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Type")
			return
		}
		z.Type = DkgMessageType(zb0002)
	}
	bts, err = z.Payload.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DkgMessage) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + z.Payload.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DkgMessageType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint16
		zb0001, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = DkgMessageType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DkgMessageType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint16(uint16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DkgMessageType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint16(o, uint16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DkgMessageType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint16
		zb0001, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = DkgMessageType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DkgMessageType) Msgsize() (s int) {
	s = msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageDkgDeal) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Id, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "MyIndex")
		return
	}
	z.Data, err = dc.ReadBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	z.TermId, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageDkgDeal) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "MyIndex")
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	err = en.WriteUint64(z.TermId)
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageDkgDeal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendUint32(o, z.Id)
	o = msgp.AppendBytes(o, z.Data)
	o = msgp.AppendUint64(o, z.TermId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageDkgDeal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Id, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MyIndex")
		return
	}
	z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	z.TermId, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageDkgDeal) Msgsize() (s int) {
	s = 1 + msgp.Uint32Size + msgp.BytesPrefixSize + len(z.Data) + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageDkgDealResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Id, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "MyIndex")
		return
	}
	z.Data, err = dc.ReadBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	z.TermId, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageDkgDealResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "MyIndex")
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	err = en.WriteUint64(z.TermId)
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageDkgDealResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendUint32(o, z.Id)
	o = msgp.AppendBytes(o, z.Data)
	o = msgp.AppendUint64(o, z.TermId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageDkgDealResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Id, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MyIndex")
		return
	}
	z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	z.TermId, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageDkgDealResponse) Msgsize() (s int) {
	s = 1 + msgp.Uint32Size + msgp.BytesPrefixSize + len(z.Data) + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageDkgGenesisPublicKey) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.DkgPublicKey, err = dc.ReadBytes(z.DkgPublicKey)
	if err != nil {
		err = msgp.WrapError(err, "DkgPublicKey")
		return
	}
	z.PublicKey, err = dc.ReadBytes(z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	z.Signature, err = dc.ReadBytes(z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	z.TermId, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageDkgGenesisPublicKey) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.DkgPublicKey)
	if err != nil {
		err = msgp.WrapError(err, "DkgPublicKey")
		return
	}
	err = en.WriteBytes(z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	err = en.WriteUint64(z.TermId)
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageDkgGenesisPublicKey) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendBytes(o, z.DkgPublicKey)
	o = msgp.AppendBytes(o, z.PublicKey)
	o = msgp.AppendBytes(o, z.Signature)
	o = msgp.AppendUint64(o, z.TermId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageDkgGenesisPublicKey) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.DkgPublicKey, bts, err = msgp.ReadBytesBytes(bts, z.DkgPublicKey)
	if err != nil {
		err = msgp.WrapError(err, "DkgPublicKey")
		return
	}
	z.PublicKey, bts, err = msgp.ReadBytesBytes(bts, z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	z.TermId, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageDkgGenesisPublicKey) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len(z.DkgPublicKey) + msgp.BytesPrefixSize + len(z.PublicKey) + msgp.BytesPrefixSize + len(z.Signature) + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageDkgSigSets) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.PkBls, err = dc.ReadBytes(z.PkBls)
	if err != nil {
		err = msgp.WrapError(err, "PkBls")
		return
	}
	z.TermId, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageDkgSigSets) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.PkBls)
	if err != nil {
		err = msgp.WrapError(err, "PkBls")
		return
	}
	err = en.WriteUint64(z.TermId)
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageDkgSigSets) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendBytes(o, z.PkBls)
	o = msgp.AppendUint64(o, z.TermId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageDkgSigSets) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.PkBls, bts, err = msgp.ReadBytesBytes(bts, z.PkBls)
	if err != nil {
		err = msgp.WrapError(err, "PkBls")
		return
	}
	z.TermId, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SessionId")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageDkgSigSets) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len(z.PkBls) + msgp.Uint64Size
	return
}
