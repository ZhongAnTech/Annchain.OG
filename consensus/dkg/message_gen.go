package dkg

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DkgBasicInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TermId":
			z.TermId, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "TermId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DkgBasicInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "TermId"
	err = en.Append(0x81, 0xa6, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.TermId)
	if err != nil {
		err = msgp.WrapError(err, "TermId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DkgBasicInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "TermId"
	o = append(o, 0x81, 0xa6, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.TermId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DkgBasicInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TermId":
			z.TermId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TermId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DkgBasicInfo) Msgsize() (s int) {
	s = 1 + 7 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DkgMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err, "Type")
			return
		}
		z.Type = DkgMessageType(zb0002)
	}
	err = z.Payload.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DkgMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteUint16(uint16(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	err = z.Payload.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DkgMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendUint16(o, uint16(z.Type))
	o, err = z.Payload.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DkgMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Type")
			return
		}
		z.Type = DkgMessageType(zb0002)
	}
	bts, err = z.Payload.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DkgMessage) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + z.Payload.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DkgMessageType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint16
		zb0001, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = DkgMessageType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DkgMessageType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint16(uint16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DkgMessageType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint16(o, uint16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DkgMessageType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint16
		zb0001, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = DkgMessageType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DkgMessageType) Msgsize() (s int) {
	s = msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageDkgDeal) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err, "DkgBasicInfo")
			return
		}
		switch msgp.UnsafeString(field) {
		case "TermId":
			z.DkgBasicInfo.TermId, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo")
				return
			}
		}
	}
	z.Data, err = dc.ReadBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageDkgDeal) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	// map header, size 1
	// write "TermId"
	err = en.Append(0x92, 0x81, 0xa6, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.DkgBasicInfo.TermId)
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageDkgDeal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	// map header, size 1
	// string "TermId"
	o = append(o, 0x92, 0x81, 0xa6, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.DkgBasicInfo.TermId)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageDkgDeal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err, "DkgBasicInfo")
			return
		}
		switch msgp.UnsafeString(field) {
		case "TermId":
			z.DkgBasicInfo.TermId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo")
				return
			}
		}
	}
	z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageDkgDeal) Msgsize() (s int) {
	s = 1 + 1 + 7 + msgp.Uint32Size + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageDkgDealResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err, "DkgBasicInfo")
			return
		}
		switch msgp.UnsafeString(field) {
		case "TermId":
			z.DkgBasicInfo.TermId, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo")
				return
			}
		}
	}
	z.Data, err = dc.ReadBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageDkgDealResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	// map header, size 1
	// write "TermId"
	err = en.Append(0x92, 0x81, 0xa6, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.DkgBasicInfo.TermId)
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageDkgDealResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	// map header, size 1
	// string "TermId"
	o = append(o, 0x92, 0x81, 0xa6, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.DkgBasicInfo.TermId)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageDkgDealResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err, "DkgBasicInfo")
			return
		}
		switch msgp.UnsafeString(field) {
		case "TermId":
			z.DkgBasicInfo.TermId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo")
				return
			}
		}
	}
	z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageDkgDealResponse) Msgsize() (s int) {
	s = 1 + 1 + 7 + msgp.Uint32Size + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageDkgGenesisPublicKey) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err, "DkgBasicInfo")
			return
		}
		switch msgp.UnsafeString(field) {
		case "TermId":
			z.DkgBasicInfo.TermId, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo")
				return
			}
		}
	}
	z.DkgPublicKey, err = dc.ReadBytes(z.DkgPublicKey)
	if err != nil {
		err = msgp.WrapError(err, "DkgPublicKey")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageDkgGenesisPublicKey) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	// map header, size 1
	// write "TermId"
	err = en.Append(0x92, 0x81, 0xa6, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.DkgBasicInfo.TermId)
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
		return
	}
	err = en.WriteBytes(z.DkgPublicKey)
	if err != nil {
		err = msgp.WrapError(err, "DkgPublicKey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageDkgGenesisPublicKey) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	// map header, size 1
	// string "TermId"
	o = append(o, 0x92, 0x81, 0xa6, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.DkgBasicInfo.TermId)
	o = msgp.AppendBytes(o, z.DkgPublicKey)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageDkgGenesisPublicKey) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err, "DkgBasicInfo")
			return
		}
		switch msgp.UnsafeString(field) {
		case "TermId":
			z.DkgBasicInfo.TermId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo")
				return
			}
		}
	}
	z.DkgPublicKey, bts, err = msgp.ReadBytesBytes(bts, z.DkgPublicKey)
	if err != nil {
		err = msgp.WrapError(err, "DkgPublicKey")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageDkgGenesisPublicKey) Msgsize() (s int) {
	s = 1 + 1 + 7 + msgp.Uint32Size + msgp.BytesPrefixSize + len(z.DkgPublicKey)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageDkgSigSets) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err, "DkgBasicInfo")
			return
		}
		switch msgp.UnsafeString(field) {
		case "TermId":
			z.DkgBasicInfo.TermId, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo")
				return
			}
		}
	}
	z.PkBls, err = dc.ReadBytes(z.PkBls)
	if err != nil {
		err = msgp.WrapError(err, "PkBls")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageDkgSigSets) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	// map header, size 1
	// write "TermId"
	err = en.Append(0x92, 0x81, 0xa6, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.DkgBasicInfo.TermId)
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
		return
	}
	err = en.WriteBytes(z.PkBls)
	if err != nil {
		err = msgp.WrapError(err, "PkBls")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageDkgSigSets) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	// map header, size 1
	// string "TermId"
	o = append(o, 0x92, 0x81, 0xa6, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.DkgBasicInfo.TermId)
	o = msgp.AppendBytes(o, z.PkBls)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageDkgSigSets) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "DkgBasicInfo")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err, "DkgBasicInfo")
			return
		}
		switch msgp.UnsafeString(field) {
		case "TermId":
			z.DkgBasicInfo.TermId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo", "TermId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err, "DkgBasicInfo")
				return
			}
		}
	}
	z.PkBls, bts, err = msgp.ReadBytesBytes(bts, z.PkBls)
	if err != nil {
		err = msgp.WrapError(err, "PkBls")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageDkgSigSets) Msgsize() (s int) {
	s = 1 + 1 + 7 + msgp.Uint32Size + msgp.BytesPrefixSize + len(z.PkBls)
	return
}
