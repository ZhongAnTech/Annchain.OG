package state

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/annchain/OG/common/math"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (t *TokenObject) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	t.TokenID, err = dc.ReadInt32()
	if err != nil {
		err = msgp.WrapError(err, "TokenID")
		return
	}
	t.Name, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	t.Symbol, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Symbol")
		return
	}
	err = t.Issuer.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Issuer")
		return
	}
	t.ReIssuable, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "ReIssuable")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Issues")
		return
	}
	if cap(t.Issues) >= int(zb0002) {
		t.Issues = (t.Issues)[:zb0002]
	} else {
		t.Issues = make([]*math.BigInt, zb0002)
	}
	for za0001 := range t.Issues {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "Issues", za0001)
				return
			}
			t.Issues[za0001] = nil
		} else {
			if t.Issues[za0001] == nil {
				t.Issues[za0001] = new(math.BigInt)
			}
			err = t.Issues[za0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Issues", za0001)
				return
			}
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Left")
			return
		}
		t.Left = nil
	} else {
		if t.Left == nil {
			t.Left = new(math.BigInt)
		}
		err = t.Left.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Left")
			return
		}
	}
	t.Destroyed, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "Destroyed")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (t *TokenObject) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 8
	err = en.Append(0x98)
	if err != nil {
		return
	}
	err = en.WriteInt32(t.TokenID)
	if err != nil {
		err = msgp.WrapError(err, "TokenID")
		return
	}
	err = en.WriteString(t.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	err = en.WriteString(t.Symbol)
	if err != nil {
		err = msgp.WrapError(err, "Symbol")
		return
	}
	err = t.Issuer.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Issuer")
		return
	}
	err = en.WriteBool(t.ReIssuable)
	if err != nil {
		err = msgp.WrapError(err, "ReIssuable")
		return
	}
	err = en.WriteArrayHeader(uint32(len(t.Issues)))
	if err != nil {
		err = msgp.WrapError(err, "Issues")
		return
	}
	for za0001 := range t.Issues {
		if t.Issues[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = t.Issues[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Issues", za0001)
				return
			}
		}
	}
	if t.Left == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = t.Left.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Left")
			return
		}
	}
	err = en.WriteBool(t.Destroyed)
	if err != nil {
		err = msgp.WrapError(err, "Destroyed")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (t *TokenObject) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, t.Msgsize())
	// array header, size 8
	o = append(o, 0x98)
	o = msgp.AppendInt32(o, t.TokenID)
	o = msgp.AppendString(o, t.Name)
	o = msgp.AppendString(o, t.Symbol)
	o, err = t.Issuer.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Issuer")
		return
	}
	o = msgp.AppendBool(o, t.ReIssuable)
	o = msgp.AppendArrayHeader(o, uint32(len(t.Issues)))
	for za0001 := range t.Issues {
		if t.Issues[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = t.Issues[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Issues", za0001)
				return
			}
		}
	}
	if t.Left == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = t.Left.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Left")
			return
		}
	}
	o = msgp.AppendBool(o, t.Destroyed)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (t *TokenObject) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	t.TokenID, bts, err = msgp.ReadInt32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TokenID")
		return
	}
	t.Name, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	t.Symbol, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Symbol")
		return
	}
	bts, err = t.Issuer.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Issuer")
		return
	}
	t.ReIssuable, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ReIssuable")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Issues")
		return
	}
	if cap(t.Issues) >= int(zb0002) {
		t.Issues = (t.Issues)[:zb0002]
	} else {
		t.Issues = make([]*math.BigInt, zb0002)
	}
	for za0001 := range t.Issues {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			t.Issues[za0001] = nil
		} else {
			if t.Issues[za0001] == nil {
				t.Issues[za0001] = new(math.BigInt)
			}
			bts, err = t.Issues[za0001].UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Issues", za0001)
				return
			}
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		t.Left = nil
	} else {
		if t.Left == nil {
			t.Left = new(math.BigInt)
		}
		bts, err = t.Left.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Left")
			return
		}
	}
	t.Destroyed, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Destroyed")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (t *TokenObject) Msgsize() (s int) {
	s = 1 + msgp.Int32Size + msgp.StringPrefixSize + len(t.Name) + msgp.StringPrefixSize + len(t.Symbol) + t.Issuer.Msgsize() + msgp.BoolSize + msgp.ArrayHeaderSize
	for za0001 := range t.Issues {
		if t.Issues[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += t.Issues[za0001].Msgsize()
		}
	}
	if t.Left == nil {
		s += msgp.NilSize
	} else {
		s += t.Left.Msgsize()
	}
	s += msgp.BoolSize
	return
}
