package archive

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *RawArchive) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	err = z.Archive.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Archive")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RawArchive) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = z.Archive.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Archive")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RawArchive) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o, err = z.Archive.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Archive")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RawArchive) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	bts, err = z.Archive.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Archive")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RawArchive) Msgsize() (s int) {
	s = 1 + z.Archive.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RawArchives) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(RawArchives, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(RawArchive)
			}
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			if zb0003 != 1 {
				err = msgp.ArrayError{Wanted: 1, Got: zb0003}
				return
			}
			err = (*z)[zb0001].Archive.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001, "Archive")
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z RawArchives) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004 := range z {
		if z[zb0004] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// array header, size 1
			err = en.Append(0x91)
			if err != nil {
				return
			}
			err = z[zb0004].Archive.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004, "Archive")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RawArchives) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0004 := range z {
		if z[zb0004] == nil {
			o = msgp.AppendNil(o)
		} else {
			// array header, size 1
			o = append(o, 0x91)
			o, err = z[zb0004].Archive.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004, "Archive")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RawArchives) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(RawArchives, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(RawArchive)
			}
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			if zb0003 != 1 {
				err = msgp.ArrayError{Wanted: 1, Got: zb0003}
				return
			}
			bts, err = (*z)[zb0001].Archive.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001, "Archive")
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RawArchives) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0004 := range z {
		if z[zb0004] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + z[zb0004].Archive.Msgsize()
		}
	}
	return
}
