package ogmessage

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/annchain/OG/common"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BloomFilter) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Data, err = dc.ReadBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	z.Count, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	z.Capacity, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "Capacity")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BloomFilter) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	err = en.WriteUint32(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	err = en.WriteUint32(z.Capacity)
	if err != nil {
		err = msgp.WrapError(err, "Capacity")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BloomFilter) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendBytes(o, z.Data)
	o = msgp.AppendUint32(o, z.Count)
	o = msgp.AppendUint32(o, z.Capacity)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BloomFilter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	z.Count, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	z.Capacity, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Capacity")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BloomFilter) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len(z.Data) + msgp.Uint32Size + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HashOrNumber) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Hash")
			return
		}
		z.Hash = nil
	} else {
		if z.Hash == nil {
			z.Hash = new(common.Hash)
		}
		err = z.Hash.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Hash")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Number")
			return
		}
		z.Number = nil
	} else {
		if z.Number == nil {
			z.Number = new(uint64)
		}
		*z.Number, err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, "Number")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HashOrNumber) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.Hash == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Hash.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Hash")
			return
		}
	}
	if z.Number == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteUint64(*z.Number)
		if err != nil {
			err = msgp.WrapError(err, "Number")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HashOrNumber) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.Hash == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Hash.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Hash")
			return
		}
	}
	if z.Number == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendUint64(o, *z.Number)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashOrNumber) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Hash = nil
	} else {
		if z.Hash == nil {
			z.Hash = new(common.Hash)
		}
		bts, err = z.Hash.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Hash")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Number = nil
	} else {
		if z.Number == nil {
			z.Number = new(uint64)
		}
		*z.Number, bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Number")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HashOrNumber) Msgsize() (s int) {
	s = 1
	if z.Hash == nil {
		s += msgp.NilSize
	} else {
		s += z.Hash.Msgsize()
	}
	if z.Number == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Uint64Size
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HashTerminat) DecodeMsg(dc *msgp.Reader) (err error) {
	err = dc.ReadExactBytes((z)[:])
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HashTerminat) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteBytes((z)[:])
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HashTerminat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, (z)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashTerminat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	bts, err = msgp.ReadExactBytes(bts, (z)[:])
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HashTerminat) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (4 * (msgp.ByteSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HashTerminats) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0003) {
		(*z) = (*z)[:zb0003]
	} else {
		(*z) = make(HashTerminats, zb0003)
	}
	for zb0001 := range *z {
		err = dc.ReadExactBytes(((*z)[zb0001])[:])
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z HashTerminats) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004 := range z {
		err = en.WriteBytes((z[zb0004])[:])
		if err != nil {
			err = msgp.WrapError(err, zb0004)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HashTerminats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0004 := range z {
		o = msgp.AppendBytes(o, (z[zb0004])[:])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashTerminats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0003) {
		(*z) = (*z)[:zb0003]
	} else {
		(*z) = make(HashTerminats, zb0003)
	}
	for zb0001 := range *z {
		bts, err = msgp.ReadExactBytes(bts, ((*z)[zb0001])[:])
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HashTerminats) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (len(z) * (4 * (msgp.ByteSize)))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageBodyData) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "RawSequencer")
			return
		}
		z.RawSequencer = nil
	} else {
		if z.RawSequencer == nil {
			z.RawSequencer = new(RawSequencer)
		}
		err = z.RawSequencer.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "RawSequencer")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "RawTxs")
			return
		}
		z.RawTxs = nil
	} else {
		if z.RawTxs == nil {
			z.RawTxs = new(TxisMarshaler)
		}
		err = z.RawTxs.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "RawTxs")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageBodyData) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.RawSequencer == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RawSequencer.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "RawSequencer")
			return
		}
	}
	if z.RawTxs == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RawTxs.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "RawTxs")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageBodyData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.RawSequencer == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RawSequencer.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "RawSequencer")
			return
		}
	}
	if z.RawTxs == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RawTxs.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "RawTxs")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageBodyData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.RawSequencer = nil
	} else {
		if z.RawSequencer == nil {
			z.RawSequencer = new(RawSequencer)
		}
		bts, err = z.RawSequencer.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "RawSequencer")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.RawTxs = nil
	} else {
		if z.RawTxs == nil {
			z.RawTxs = new(TxisMarshaler)
		}
		bts, err = z.RawTxs.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "RawTxs")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageBodyData) Msgsize() (s int) {
	s = 1
	if z.RawSequencer == nil {
		s += msgp.NilSize
	} else {
		s += z.RawSequencer.Msgsize()
	}
	if z.RawTxs == nil {
		s += msgp.NilSize
	} else {
		s += z.RawTxs.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RawData) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 []byte
		zb0001, err = dc.ReadBytes([]byte((*z)))
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = RawData(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z RawData) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteBytes([]byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RawData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RawData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 []byte
		zb0001, bts, err = msgp.ReadBytesBytes(bts, []byte((*z)))
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = RawData(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RawData) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}
