package ogmessage

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MessageAnnsensus) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	err = z.InnerMessageType.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageType")
		return
	}
	z.InnerMessage, err = dc.ReadBytes(z.InnerMessage)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessage")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageAnnsensus) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = z.InnerMessageType.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageType")
		return
	}
	err = en.WriteBytes(z.InnerMessage)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessage")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageAnnsensus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o, err = z.InnerMessageType.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageType")
		return
	}
	o = msgp.AppendBytes(o, z.InnerMessage)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageAnnsensus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	bts, err = z.InnerMessageType.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessageType")
		return
	}
	z.InnerMessage, bts, err = msgp.ReadBytesBytes(bts, z.InnerMessage)
	if err != nil {
		err = msgp.WrapError(err, "InnerMessage")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageAnnsensus) Msgsize() (s int) {
	s = 1 + z.InnerMessageType.Msgsize() + msgp.BytesPrefixSize + len(z.InnerMessage)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageHeaderRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Amount, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	z.Skip, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Skip")
		return
	}
	z.Reverse, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "Reverse")
		return
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageHeaderRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Amount)
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	err = en.WriteUint64(z.Skip)
	if err != nil {
		err = msgp.WrapError(err, "Skip")
		return
	}
	err = en.WriteBool(z.Reverse)
	if err != nil {
		err = msgp.WrapError(err, "Reverse")
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageHeaderRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendUint64(o, z.Amount)
	o = msgp.AppendUint64(o, z.Skip)
	o = msgp.AppendBool(o, z.Reverse)
	o = msgp.AppendUint32(o, z.RequestId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageHeaderRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Amount, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	z.Skip, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Skip")
		return
	}
	z.Reverse, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Reverse")
		return
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageHeaderRequest) Msgsize() (s int) {
	s = 1 + msgp.Uint64Size + msgp.Uint64Size + msgp.BoolSize + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageNewResource) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Resources":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Resources")
				return
			}
			if cap(z.Resources) >= int(zb0002) {
				z.Resources = (z.Resources)[:zb0002]
			} else {
				z.Resources = make([]MessageContentResource, zb0002)
			}
			for za0001 := range z.Resources {
				err = z.Resources[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Resources", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageNewResource) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Resources"
	err = en.Append(0x81, 0xa9, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Resources)))
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	for za0001 := range z.Resources {
		err = z.Resources[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageNewResource) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Resources"
	o = append(o, 0x81, 0xa9, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Resources)))
	for za0001 := range z.Resources {
		o, err = z.Resources[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageNewResource) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Resources":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Resources")
				return
			}
			if cap(z.Resources) >= int(zb0002) {
				z.Resources = (z.Resources)[:zb0002]
			} else {
				z.Resources = make([]MessageContentResource, zb0002)
			}
			for za0001 := range z.Resources {
				bts, err = z.Resources[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Resources", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageNewResource) Msgsize() (s int) {
	s = 1 + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.Resources {
		s += z.Resources[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessagePing) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MessagePing) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 0
	err = en.Append(0x90)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MessagePing) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 0
	o = append(o, 0x90)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessagePing) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MessagePing) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessagePong) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MessagePong) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 0
	err = en.Append(0x90)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MessagePong) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 0
	o = append(o, 0x90)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessagePong) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MessagePong) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageSyncRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	err = z.Hashes.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	z.BloomFilter, err = dc.ReadBytes(z.BloomFilter)
	if err != nil {
		err = msgp.WrapError(err, "BloomFilter")
		return
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageSyncRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = z.Hashes.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	err = en.WriteBytes(z.BloomFilter)
	if err != nil {
		err = msgp.WrapError(err, "BloomFilter")
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageSyncRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o, err = z.Hashes.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	o = msgp.AppendBytes(o, z.BloomFilter)
	o = msgp.AppendUint32(o, z.RequestId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageSyncRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	bts, err = z.Hashes.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	z.BloomFilter, bts, err = msgp.ReadBytesBytes(bts, z.BloomFilter)
	if err != nil {
		err = msgp.WrapError(err, "BloomFilter")
		return
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageSyncRequest) Msgsize() (s int) {
	s = 1 + z.Hashes.Msgsize() + msgp.BytesPrefixSize + len(z.BloomFilter) + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageSyncResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	if cap(z.Resources) >= int(zb0002) {
		z.Resources = (z.Resources)[:zb0002]
	} else {
		z.Resources = make([]MessageContentResource, zb0002)
	}
	for za0001 := range z.Resources {
		err = z.Resources[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageSyncResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Resources)))
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	for za0001 := range z.Resources {
		err = z.Resources[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageSyncResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendUint32(o, z.RequestId)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Resources)))
	for za0001 := range z.Resources {
		o, err = z.Resources[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageSyncResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	if cap(z.Resources) >= int(zb0002) {
		z.Resources = (z.Resources)[:zb0002]
	} else {
		z.Resources = make([]MessageContentResource, zb0002)
	}
	for za0001 := range z.Resources {
		bts, err = z.Resources[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageSyncResponse) Msgsize() (s int) {
	s = 1 + msgp.Uint32Size + msgp.ArrayHeaderSize
	for za0001 := range z.Resources {
		s += z.Resources[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageTxsRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	err = z.Hashes.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	err = z.SeqHash.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "SeqHash")
		return
	}
	z.Id, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageTxsRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = z.Hashes.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	err = z.SeqHash.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "SeqHash")
		return
	}
	err = en.WriteUint64(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageTxsRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o, err = z.Hashes.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	o, err = z.SeqHash.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SeqHash")
		return
	}
	o = msgp.AppendUint64(o, z.Id)
	o = msgp.AppendUint32(o, z.RequestId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageTxsRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	bts, err = z.Hashes.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	bts, err = z.SeqHash.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "SeqHash")
		return
	}
	z.Id, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageTxsRequest) Msgsize() (s int) {
	s = 1 + z.Hashes.Msgsize() + z.SeqHash.Msgsize() + msgp.Uint64Size + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageTxsResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.RequestedId, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "RequestedId")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	if cap(z.Resources) >= int(zb0002) {
		z.Resources = (z.Resources)[:zb0002]
	} else {
		z.Resources = make([]MessageContentResource, zb0002)
	}
	for za0001 := range z.Resources {
		err = z.Resources[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageTxsResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RequestedId)
	if err != nil {
		err = msgp.WrapError(err, "RequestedId")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Resources)))
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	for za0001 := range z.Resources {
		err = z.Resources[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageTxsResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendUint32(o, z.RequestedId)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Resources)))
	for za0001 := range z.Resources {
		o, err = z.Resources[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageTxsResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.RequestedId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RequestedId")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	if cap(z.Resources) >= int(zb0002) {
		z.Resources = (z.Resources)[:zb0002]
	} else {
		z.Resources = make([]MessageContentResource, zb0002)
	}
	for za0001 := range z.Resources {
		bts, err = z.Resources[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageTxsResponse) Msgsize() (s int) {
	s = 1 + msgp.Uint32Size + msgp.ArrayHeaderSize
	for za0001 := range z.Resources {
		s += z.Resources[za0001].Msgsize()
	}
	return
}
