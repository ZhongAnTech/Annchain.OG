package ledger

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/annchain/OG/common"
	"github.com/annchain/OG/common/math"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *LedgerContentSequencer) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	err = z.Hash.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ParentsHash")
		return
	}
	if cap(z.ParentsHash) >= int(zb0002) {
		z.ParentsHash = (z.ParentsHash)[:zb0002]
	} else {
		z.ParentsHash = make([]common.Hash, zb0002)
	}
	for za0001 := range z.ParentsHash {
		err = z.ParentsHash[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "ParentsHash", za0001)
			return
		}
	}
	z.MineNonce, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "MineNonce")
		return
	}
	z.AccountNonce, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "AccountNonce")
		return
	}
	err = z.Issuer.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Issuer")
		return
	}
	z.PublicKey, err = dc.ReadBytes(z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	z.Signature, err = dc.ReadBytes(z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	err = z.StateRoot.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "StateRoot")
		return
	}
	z.Height, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LedgerContentSequencer) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 9
	err = en.Append(0x99)
	if err != nil {
		return
	}
	err = z.Hash.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ParentsHash)))
	if err != nil {
		err = msgp.WrapError(err, "ParentsHash")
		return
	}
	for za0001 := range z.ParentsHash {
		err = z.ParentsHash[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ParentsHash", za0001)
			return
		}
	}
	err = en.WriteUint64(z.MineNonce)
	if err != nil {
		err = msgp.WrapError(err, "MineNonce")
		return
	}
	err = en.WriteUint64(z.AccountNonce)
	if err != nil {
		err = msgp.WrapError(err, "AccountNonce")
		return
	}
	err = z.Issuer.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Issuer")
		return
	}
	err = en.WriteBytes(z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	err = z.StateRoot.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "StateRoot")
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LedgerContentSequencer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 9
	o = append(o, 0x99)
	o, err = z.Hash.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.ParentsHash)))
	for za0001 := range z.ParentsHash {
		o, err = z.ParentsHash[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ParentsHash", za0001)
			return
		}
	}
	o = msgp.AppendUint64(o, z.MineNonce)
	o = msgp.AppendUint64(o, z.AccountNonce)
	o, err = z.Issuer.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Issuer")
		return
	}
	o = msgp.AppendBytes(o, z.PublicKey)
	o = msgp.AppendBytes(o, z.Signature)
	o, err = z.StateRoot.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "StateRoot")
		return
	}
	o = msgp.AppendUint64(o, z.Height)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LedgerContentSequencer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	bts, err = z.Hash.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ParentsHash")
		return
	}
	if cap(z.ParentsHash) >= int(zb0002) {
		z.ParentsHash = (z.ParentsHash)[:zb0002]
	} else {
		z.ParentsHash = make([]common.Hash, zb0002)
	}
	for za0001 := range z.ParentsHash {
		bts, err = z.ParentsHash[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "ParentsHash", za0001)
			return
		}
	}
	z.MineNonce, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MineNonce")
		return
	}
	z.AccountNonce, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "AccountNonce")
		return
	}
	bts, err = z.Issuer.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Issuer")
		return
	}
	z.PublicKey, bts, err = msgp.ReadBytesBytes(bts, z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	bts, err = z.StateRoot.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "StateRoot")
		return
	}
	z.Height, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LedgerContentSequencer) Msgsize() (s int) {
	s = 1 + z.Hash.Msgsize() + msgp.ArrayHeaderSize
	for za0001 := range z.ParentsHash {
		s += z.ParentsHash[za0001].Msgsize()
	}
	s += msgp.Uint64Size + msgp.Uint64Size + z.Issuer.Msgsize() + msgp.BytesPrefixSize + len(z.PublicKey) + msgp.BytesPrefixSize + len(z.Signature) + z.StateRoot.Msgsize() + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LedgerContentTx) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 11 {
		err = msgp.ArrayError{Wanted: 11, Got: zb0001}
		return
	}
	err = z.Hash.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ParentsHash")
		return
	}
	if cap(z.ParentsHash) >= int(zb0002) {
		z.ParentsHash = (z.ParentsHash)[:zb0002]
	} else {
		z.ParentsHash = make([]common.Hash, zb0002)
	}
	for za0001 := range z.ParentsHash {
		err = z.ParentsHash[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "ParentsHash", za0001)
			return
		}
	}
	z.MineNonce, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "MineNonce")
		return
	}
	z.AccountNonce, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "AccountNonce")
		return
	}
	err = z.From.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	err = z.To.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "To")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Value")
			return
		}
		z.Value = nil
	} else {
		if z.Value == nil {
			z.Value = new(math.BigInt)
		}
		err = z.Value.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Value")
			return
		}
	}
	z.TokenId, err = dc.ReadInt32()
	if err != nil {
		err = msgp.WrapError(err, "TokenId")
		return
	}
	z.PublicKey, err = dc.ReadBytes(z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	z.Data, err = dc.ReadBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	z.Signature, err = dc.ReadBytes(z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LedgerContentTx) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 11
	err = en.Append(0x9b)
	if err != nil {
		return
	}
	err = z.Hash.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ParentsHash)))
	if err != nil {
		err = msgp.WrapError(err, "ParentsHash")
		return
	}
	for za0001 := range z.ParentsHash {
		err = z.ParentsHash[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ParentsHash", za0001)
			return
		}
	}
	err = en.WriteUint64(z.MineNonce)
	if err != nil {
		err = msgp.WrapError(err, "MineNonce")
		return
	}
	err = en.WriteUint64(z.AccountNonce)
	if err != nil {
		err = msgp.WrapError(err, "AccountNonce")
		return
	}
	err = z.From.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	err = z.To.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "To")
		return
	}
	if z.Value == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Value.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Value")
			return
		}
	}
	err = en.WriteInt32(z.TokenId)
	if err != nil {
		err = msgp.WrapError(err, "TokenId")
		return
	}
	err = en.WriteBytes(z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LedgerContentTx) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 11
	o = append(o, 0x9b)
	o, err = z.Hash.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.ParentsHash)))
	for za0001 := range z.ParentsHash {
		o, err = z.ParentsHash[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ParentsHash", za0001)
			return
		}
	}
	o = msgp.AppendUint64(o, z.MineNonce)
	o = msgp.AppendUint64(o, z.AccountNonce)
	o, err = z.From.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	o, err = z.To.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "To")
		return
	}
	if z.Value == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Value.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Value")
			return
		}
	}
	o = msgp.AppendInt32(o, z.TokenId)
	o = msgp.AppendBytes(o, z.PublicKey)
	o = msgp.AppendBytes(o, z.Data)
	o = msgp.AppendBytes(o, z.Signature)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LedgerContentTx) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 11 {
		err = msgp.ArrayError{Wanted: 11, Got: zb0001}
		return
	}
	bts, err = z.Hash.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ParentsHash")
		return
	}
	if cap(z.ParentsHash) >= int(zb0002) {
		z.ParentsHash = (z.ParentsHash)[:zb0002]
	} else {
		z.ParentsHash = make([]common.Hash, zb0002)
	}
	for za0001 := range z.ParentsHash {
		bts, err = z.ParentsHash[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "ParentsHash", za0001)
			return
		}
	}
	z.MineNonce, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MineNonce")
		return
	}
	z.AccountNonce, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "AccountNonce")
		return
	}
	bts, err = z.From.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	bts, err = z.To.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "To")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Value = nil
	} else {
		if z.Value == nil {
			z.Value = new(math.BigInt)
		}
		bts, err = z.Value.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Value")
			return
		}
	}
	z.TokenId, bts, err = msgp.ReadInt32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TokenId")
		return
	}
	z.PublicKey, bts, err = msgp.ReadBytesBytes(bts, z.PublicKey)
	if err != nil {
		err = msgp.WrapError(err, "PublicKey")
		return
	}
	z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LedgerContentTx) Msgsize() (s int) {
	s = 1 + z.Hash.Msgsize() + msgp.ArrayHeaderSize
	for za0001 := range z.ParentsHash {
		s += z.ParentsHash[za0001].Msgsize()
	}
	s += msgp.Uint64Size + msgp.Uint64Size + z.From.Msgsize() + z.To.Msgsize()
	if z.Value == nil {
		s += msgp.NilSize
	} else {
		s += z.Value.Msgsize()
	}
	s += msgp.Int32Size + msgp.BytesPrefixSize + len(z.PublicKey) + msgp.BytesPrefixSize + len(z.Data) + msgp.BytesPrefixSize + len(z.Signature)
	return
}
