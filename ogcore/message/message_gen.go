package message

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *OgMessageBatchSyncRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	err = z.Hashes.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OgMessageBatchSyncRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = z.Hashes.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OgMessageBatchSyncRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o, err = z.Hashes.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	o = msgp.AppendUint32(o, z.RequestId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OgMessageBatchSyncRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	bts, err = z.Hashes.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Hashes")
		return
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OgMessageBatchSyncRequest) Msgsize() (s int) {
	s = 1 + z.Hashes.Msgsize() + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OgMessageHeaderRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Amount, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	z.Skip, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Skip")
		return
	}
	z.Reverse, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "Reverse")
		return
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OgMessageHeaderRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Amount)
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	err = en.WriteUint64(z.Skip)
	if err != nil {
		err = msgp.WrapError(err, "Skip")
		return
	}
	err = en.WriteBool(z.Reverse)
	if err != nil {
		err = msgp.WrapError(err, "Reverse")
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OgMessageHeaderRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendUint64(o, z.Amount)
	o = msgp.AppendUint64(o, z.Skip)
	o = msgp.AppendBool(o, z.Reverse)
	o = msgp.AppendUint32(o, z.RequestId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OgMessageHeaderRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Amount, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	z.Skip, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Skip")
		return
	}
	z.Reverse, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Reverse")
		return
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OgMessageHeaderRequest) Msgsize() (s int) {
	s = 1 + msgp.Uint64Size + msgp.Uint64Size + msgp.BoolSize + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OgMessageHeightSyncRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Height":
			z.Height, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "Offset":
			z.Offset, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		case "RequestId":
			z.RequestId, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "RequestId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z OgMessageHeightSyncRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Height"
	err = en.Append(0x83, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "Offset"
	err = en.Append(0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Offset)
	if err != nil {
		err = msgp.WrapError(err, "Offset")
		return
	}
	// write "RequestId"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OgMessageHeightSyncRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Height"
	o = append(o, 0x83, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.Height)
	// string "Offset"
	o = append(o, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o = msgp.AppendInt(o, z.Offset)
	// string "RequestId"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.RequestId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OgMessageHeightSyncRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Height":
			z.Height, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "Offset":
			z.Offset, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		case "RequestId":
			z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OgMessageHeightSyncRequest) Msgsize() (s int) {
	s = 1 + 7 + msgp.Uint64Size + 7 + msgp.IntSize + 10 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OgMessageNewResource) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	if cap(z.Resources) >= int(zb0002) {
		z.Resources = (z.Resources)[:zb0002]
	} else {
		z.Resources = make([]MessageContentResource, zb0002)
	}
	for za0001 := range z.Resources {
		err = z.Resources[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OgMessageNewResource) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Resources)))
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	for za0001 := range z.Resources {
		err = z.Resources[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OgMessageNewResource) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Resources)))
	for za0001 := range z.Resources {
		o, err = z.Resources[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OgMessageNewResource) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	if cap(z.Resources) >= int(zb0002) {
		z.Resources = (z.Resources)[:zb0002]
	} else {
		z.Resources = make([]MessageContentResource, zb0002)
	}
	for za0001 := range z.Resources {
		bts, err = z.Resources[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OgMessageNewResource) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Resources {
		s += z.Resources[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OgMessagePing) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z OgMessagePing) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 0
	err = en.Append(0x90)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OgMessagePing) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 0
	o = append(o, 0x90)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OgMessagePing) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OgMessagePing) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OgMessagePong) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z OgMessagePong) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 0
	err = en.Append(0x90)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OgMessagePong) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 0
	o = append(o, 0x90)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OgMessagePong) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OgMessagePong) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OgMessageQueryStatusRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z OgMessageQueryStatusRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 0
	err = en.Append(0x90)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OgMessageQueryStatusRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 0
	o = append(o, 0x90)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OgMessageQueryStatusRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 0 {
		err = msgp.ArrayError{Wanted: 0, Got: zb0001}
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OgMessageQueryStatusRequest) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OgMessageQueryStatusResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.ProtocolVersion, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "ProtocolVersion")
		return
	}
	z.NetworkId, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "NetworkId")
		return
	}
	err = z.CurrentBlock.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "CurrentBlock")
		return
	}
	err = z.GenesisBlock.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "GenesisBlock")
		return
	}
	z.CurrentHeight, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "CurrentHeight")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OgMessageQueryStatusResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ProtocolVersion)
	if err != nil {
		err = msgp.WrapError(err, "ProtocolVersion")
		return
	}
	err = en.WriteUint64(z.NetworkId)
	if err != nil {
		err = msgp.WrapError(err, "NetworkId")
		return
	}
	err = z.CurrentBlock.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CurrentBlock")
		return
	}
	err = z.GenesisBlock.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "GenesisBlock")
		return
	}
	err = en.WriteUint64(z.CurrentHeight)
	if err != nil {
		err = msgp.WrapError(err, "CurrentHeight")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OgMessageQueryStatusResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o = msgp.AppendUint32(o, z.ProtocolVersion)
	o = msgp.AppendUint64(o, z.NetworkId)
	o, err = z.CurrentBlock.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CurrentBlock")
		return
	}
	o, err = z.GenesisBlock.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "GenesisBlock")
		return
	}
	o = msgp.AppendUint64(o, z.CurrentHeight)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OgMessageQueryStatusResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.ProtocolVersion, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ProtocolVersion")
		return
	}
	z.NetworkId, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "NetworkId")
		return
	}
	bts, err = z.CurrentBlock.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "CurrentBlock")
		return
	}
	bts, err = z.GenesisBlock.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "GenesisBlock")
		return
	}
	z.CurrentHeight, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "CurrentHeight")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OgMessageQueryStatusResponse) Msgsize() (s int) {
	s = 1 + msgp.Uint32Size + msgp.Uint64Size + z.CurrentBlock.Msgsize() + z.GenesisBlock.Msgsize() + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OgMessageSyncResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	z.Height, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	z.Offset, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "Offset")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	if cap(z.Resources) >= int(zb0002) {
		z.Resources = (z.Resources)[:zb0002]
	} else {
		z.Resources = make([]MessageContentResource, zb0002)
	}
	for za0001 := range z.Resources {
		err = z.Resources[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OgMessageSyncResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	err = en.WriteInt(z.Offset)
	if err != nil {
		err = msgp.WrapError(err, "Offset")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Resources)))
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	for za0001 := range z.Resources {
		err = z.Resources[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OgMessageSyncResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendUint32(o, z.RequestId)
	o = msgp.AppendUint64(o, z.Height)
	o = msgp.AppendInt(o, z.Offset)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Resources)))
	for za0001 := range z.Resources {
		o, err = z.Resources[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OgMessageSyncResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RequestId")
		return
	}
	z.Height, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	z.Offset, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Offset")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Resources")
		return
	}
	if cap(z.Resources) >= int(zb0002) {
		z.Resources = (z.Resources)[:zb0002]
	} else {
		z.Resources = make([]MessageContentResource, zb0002)
	}
	for za0001 := range z.Resources {
		bts, err = z.Resources[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Resources", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OgMessageSyncResponse) Msgsize() (s int) {
	s = 1 + msgp.Uint32Size + msgp.Uint64Size + msgp.IntSize + msgp.ArrayHeaderSize
	for za0001 := range z.Resources {
		s += z.Resources[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OgMessageType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint16
		zb0001, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = OgMessageType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z OgMessageType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint16(uint16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OgMessageType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint16(o, uint16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OgMessageType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint16
		zb0001, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = OgMessageType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OgMessageType) Msgsize() (s int) {
	s = msgp.Uint16Size
	return
}
