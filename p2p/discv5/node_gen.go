package discv5

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Node) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.IP, err = dc.ReadBytes(z.IP)
	if err != nil {
		return
	}
	z.UDP, err = dc.ReadUint16()
	if err != nil {
		return
	}
	z.TCP, err = dc.ReadUint16()
	if err != nil {
		return
	}
	err = dc.ReadExactBytes((z.ID)[:])
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Node) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.IP)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.UDP)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.TCP)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.ID)[:])
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Node) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendBytes(o, z.IP)
	o = msgp.AppendUint16(o, z.UDP)
	o = msgp.AppendUint16(o, z.TCP)
	o = msgp.AppendBytes(o, (z.ID)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Node) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.IP, bts, err = msgp.ReadBytesBytes(bts, z.IP)
	if err != nil {
		return
	}
	z.UDP, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		return
	}
	z.TCP, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		return
	}
	bts, err = msgp.ReadExactBytes(bts, (z.ID)[:])
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Node) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len(z.IP) + msgp.Uint16Size + msgp.Uint16Size + msgp.ArrayHeaderSize + (64 * (msgp.ByteSize))
	return
}
