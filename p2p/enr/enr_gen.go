package enr

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Pair) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "K":
			z.K, err = dc.ReadString()
			if err != nil {
				return
			}
		case "V":
			z.V, err = dc.ReadBytes(z.V)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Pair) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "K"
	err = en.Append(0x82, 0xa1, 0x4b)
	if err != nil {
		return
	}
	err = en.WriteString(z.K)
	if err != nil {
		return
	}
	// write "V"
	err = en.Append(0xa1, 0x56)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.V)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Pair) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "K"
	o = append(o, 0x82, 0xa1, 0x4b)
	o = msgp.AppendString(o, z.K)
	// string "V"
	o = append(o, 0xa1, 0x56)
	o = msgp.AppendBytes(o, z.V)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pair) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "K":
			z.K, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "V":
			z.V, bts, err = msgp.ReadBytesBytes(bts, z.V)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Pair) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.K) + 2 + msgp.BytesPrefixSize + len(z.V)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Record) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Seq":
			z.Seq, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "Signature":
			z.Signature, err = dc.ReadBytes(z.Signature)
			if err != nil {
				return
			}
		case "Pairs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Pairs) >= int(zb0002) {
				z.Pairs = (z.Pairs)[:zb0002]
			} else {
				z.Pairs = make([]Pair, zb0002)
			}
			for za0001 := range z.Pairs {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "K":
						z.Pairs[za0001].K, err = dc.ReadString()
						if err != nil {
							return
						}
					case "V":
						z.Pairs[za0001].V, err = dc.ReadBytes(z.Pairs[za0001].V)
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Record) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Seq"
	err = en.Append(0x83, 0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Seq)
	if err != nil {
		return
	}
	// write "Signature"
	err = en.Append(0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		return
	}
	// write "Pairs"
	err = en.Append(0xa5, 0x50, 0x61, 0x69, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Pairs)))
	if err != nil {
		return
	}
	for za0001 := range z.Pairs {
		// map header, size 2
		// write "K"
		err = en.Append(0x82, 0xa1, 0x4b)
		if err != nil {
			return
		}
		err = en.WriteString(z.Pairs[za0001].K)
		if err != nil {
			return
		}
		// write "V"
		err = en.Append(0xa1, 0x56)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Pairs[za0001].V)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Record) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Seq"
	o = append(o, 0x83, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendUint64(o, z.Seq)
	// string "Signature"
	o = append(o, 0xa9, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o = msgp.AppendBytes(o, z.Signature)
	// string "Pairs"
	o = append(o, 0xa5, 0x50, 0x61, 0x69, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Pairs)))
	for za0001 := range z.Pairs {
		// map header, size 2
		// string "K"
		o = append(o, 0x82, 0xa1, 0x4b)
		o = msgp.AppendString(o, z.Pairs[za0001].K)
		// string "V"
		o = append(o, 0xa1, 0x56)
		o = msgp.AppendBytes(o, z.Pairs[za0001].V)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Record) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Seq":
			z.Seq, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		case "Signature":
			z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
			if err != nil {
				return
			}
		case "Pairs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Pairs) >= int(zb0002) {
				z.Pairs = (z.Pairs)[:zb0002]
			} else {
				z.Pairs = make([]Pair, zb0002)
			}
			for za0001 := range z.Pairs {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "K":
						z.Pairs[za0001].K, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							return
						}
					case "V":
						z.Pairs[za0001].V, bts, err = msgp.ReadBytesBytes(bts, z.Pairs[za0001].V)
						if err != nil {
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Record) Msgsize() (s int) {
	s = 1 + 4 + msgp.Uint64Size + 10 + msgp.BytesPrefixSize + len(z.Signature) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Pairs {
		s += 1 + 2 + msgp.StringPrefixSize + len(z.Pairs[za0001].K) + 2 + msgp.BytesPrefixSize + len(z.Pairs[za0001].V)
	}
	return
}
