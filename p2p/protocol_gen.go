package p2p

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Cap) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Name, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Version, err = dc.ReadUint32()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Cap) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Version)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Cap) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendString(o, z.Name)
	o = msgp.AppendUint32(o, z.Version)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Cap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Name, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		return
	}
	z.Version, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Cap) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Name) + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CapsByNameAndVersion) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(CapsByNameAndVersion, zb0002)
	}
	for zb0001 := range *z {
		var zb0003 uint32
		zb0003, err = dc.ReadArrayHeader()
		if err != nil {
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		(*z)[zb0001].Name, err = dc.ReadString()
		if err != nil {
			return
		}
		(*z)[zb0001].Version, err = dc.ReadUint32()
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CapsByNameAndVersion) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		return
	}
	for zb0004 := range z {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		err = en.WriteString(z[zb0004].Name)
		if err != nil {
			return
		}
		err = en.WriteUint32(z[zb0004].Version)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CapsByNameAndVersion) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0004 := range z {
		// array header, size 2
		o = append(o, 0x92)
		o = msgp.AppendString(o, z[zb0004].Name)
		o = msgp.AppendUint32(o, z[zb0004].Version)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CapsByNameAndVersion) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(CapsByNameAndVersion, zb0002)
	}
	for zb0001 := range *z {
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		(*z)[zb0001].Name, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			return
		}
		(*z)[zb0001].Version, bts, err = msgp.ReadUint32Bytes(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CapsByNameAndVersion) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0004 := range z {
		s += 1 + msgp.StringPrefixSize + len(z[zb0004].Name) + msgp.Uint32Size
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgCodeType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint16
		zb0001, err = dc.ReadUint16()
		if err != nil {
			return
		}
		(*z) = MsgCodeType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MsgCodeType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint16(uint16(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MsgCodeType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint16(o, uint16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgCodeType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint16
		zb0001, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			return
		}
		(*z) = MsgCodeType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MsgCodeType) Msgsize() (s int) {
	s = msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ProtoHandshake) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.Version, err = dc.ReadUint32()
	if err != nil {
		return
	}
	z.Name, err = dc.ReadString()
	if err != nil {
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Caps) >= int(zb0002) {
		z.Caps = (z.Caps)[:zb0002]
	} else {
		z.Caps = make([]Cap, zb0002)
	}
	for za0001 := range z.Caps {
		var zb0003 uint32
		zb0003, err = dc.ReadArrayHeader()
		if err != nil {
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		z.Caps[za0001].Name, err = dc.ReadString()
		if err != nil {
			return
		}
		z.Caps[za0001].Version, err = dc.ReadUint32()
		if err != nil {
			return
		}
	}
	z.ListenPort, err = dc.ReadUint16()
	if err != nil {
		return
	}
	z.ID, err = dc.ReadBytes(z.ID)
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ProtoHandshake) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Version)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Caps)))
	if err != nil {
		return
	}
	for za0001 := range z.Caps {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		err = en.WriteString(z.Caps[za0001].Name)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.Caps[za0001].Version)
		if err != nil {
			return
		}
	}
	err = en.WriteUint16(z.ListenPort)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ID)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ProtoHandshake) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o = msgp.AppendUint32(o, z.Version)
	o = msgp.AppendString(o, z.Name)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Caps)))
	for za0001 := range z.Caps {
		// array header, size 2
		o = append(o, 0x92)
		o = msgp.AppendString(o, z.Caps[za0001].Name)
		o = msgp.AppendUint32(o, z.Caps[za0001].Version)
	}
	o = msgp.AppendUint16(o, z.ListenPort)
	o = msgp.AppendBytes(o, z.ID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ProtoHandshake) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.Version, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	z.Name, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap(z.Caps) >= int(zb0002) {
		z.Caps = (z.Caps)[:zb0002]
	} else {
		z.Caps = make([]Cap, zb0002)
	}
	for za0001 := range z.Caps {
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		z.Caps[za0001].Name, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			return
		}
		z.Caps[za0001].Version, bts, err = msgp.ReadUint32Bytes(bts)
		if err != nil {
			return
		}
	}
	z.ListenPort, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		return
	}
	z.ID, bts, err = msgp.ReadBytesBytes(bts, z.ID)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ProtoHandshake) Msgsize() (s int) {
	s = 1 + msgp.Uint32Size + msgp.StringPrefixSize + len(z.Name) + msgp.ArrayHeaderSize
	for za0001 := range z.Caps {
		s += 1 + msgp.StringPrefixSize + len(z.Caps[za0001].Name) + msgp.Uint32Size
	}
	s += msgp.Uint16Size + msgp.BytesPrefixSize + len(z.ID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Protocol) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Name, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Version, err = dc.ReadUint32()
	if err != nil {
		return
	}
	{
		var zb0002 uint16
		zb0002, err = dc.ReadUint16()
		if err != nil {
			return
		}
		z.Length = MsgCodeType(zb0002)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Protocol) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Version)
	if err != nil {
		return
	}
	err = en.WriteUint16(uint16(z.Length))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Protocol) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendString(o, z.Name)
	o = msgp.AppendUint32(o, z.Version)
	o = msgp.AppendUint16(o, uint16(z.Length))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Protocol) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Name, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		return
	}
	z.Version, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	{
		var zb0002 uint16
		zb0002, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			return
		}
		z.Length = MsgCodeType(zb0002)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Protocol) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Name) + msgp.Uint32Size + msgp.Uint16Size
	return
}
