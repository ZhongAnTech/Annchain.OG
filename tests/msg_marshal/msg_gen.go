package msg_marshal

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Person) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Name, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Age, err = dc.ReadInt()
	if err != nil {
		return
	}
	z.Type, err = dc.ReadUint16()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Person) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Age)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Type)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Person) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendString(o, z.Name)
	o = msgp.AppendInt(o, z.Age)
	o = msgp.AppendUint16(o, z.Type)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Person) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Name, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		return
	}
	z.Age, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	z.Type, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Person) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Name) + msgp.IntSize + msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Student) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0002 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0002}
		return
	}
	z.Person.Name, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Person.Age, err = dc.ReadInt()
	if err != nil {
		return
	}
	z.Person.Type, err = dc.ReadUint16()
	if err != nil {
		return
	}
	z.Score, err = dc.ReadInt()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Student) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	// array header, size 3
	err = en.Append(0x92, 0x93)
	if err != nil {
		return
	}
	err = en.WriteString(z.Person.Name)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Person.Age)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Person.Type)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Score)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Student) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	// array header, size 3
	o = append(o, 0x92, 0x93)
	o = msgp.AppendString(o, z.Person.Name)
	o = msgp.AppendInt(o, z.Person.Age)
	o = msgp.AppendUint16(o, z.Person.Type)
	o = msgp.AppendInt(o, z.Score)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Student) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0002 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0002}
		return
	}
	z.Person.Name, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		return
	}
	z.Person.Age, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	z.Person.Type, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		return
	}
	z.Score, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Student) Msgsize() (s int) {
	s = 1 + 1 + msgp.StringPrefixSize + len(z.Person.Name) + msgp.IntSize + msgp.Uint16Size + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Teacher) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0002 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0002}
		return
	}
	z.Person.Name, err = dc.ReadString()
	if err != nil {
		return
	}
	z.Person.Age, err = dc.ReadInt()
	if err != nil {
		return
	}
	z.Person.Type, err = dc.ReadUint16()
	if err != nil {
		return
	}
	z.Teach, err = dc.ReadBool()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Teacher) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	// array header, size 3
	err = en.Append(0x92, 0x93)
	if err != nil {
		return
	}
	err = en.WriteString(z.Person.Name)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Person.Age)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Person.Type)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Teach)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Teacher) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	// array header, size 3
	o = append(o, 0x92, 0x93)
	o = msgp.AppendString(o, z.Person.Name)
	o = msgp.AppendInt(o, z.Person.Age)
	o = msgp.AppendUint16(o, z.Person.Type)
	o = msgp.AppendBool(o, z.Teach)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Teacher) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0002 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0002}
		return
	}
	z.Person.Name, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		return
	}
	z.Person.Age, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	z.Person.Type, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		return
	}
	z.Teach, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Teacher) Msgsize() (s int) {
	s = 1 + 1 + msgp.StringPrefixSize + len(z.Person.Name) + msgp.IntSize + msgp.Uint16Size + msgp.BoolSize
	return
}
