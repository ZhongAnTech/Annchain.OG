package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BasicMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.SourceId, err = dc.ReadInt()
	if err != nil {
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0002 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0002}
		return
	}
	z.HeightRound.Height, err = dc.ReadInt()
	if err != nil {
		return
	}
	z.HeightRound.Round, err = dc.ReadInt()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BasicMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.SourceId)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.HeightRound.Height)
	if err != nil {
		return
	}
	err = en.WriteInt(z.HeightRound.Round)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BasicMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.SourceId)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.HeightRound.Height)
	o = msgp.AppendInt(o, z.HeightRound.Round)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BasicMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.SourceId, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0002 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0002}
		return
	}
	z.HeightRound.Height, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	z.HeightRound.Round, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BasicMessage) Msgsize() (s int) {
	s = 1 + msgp.IntSize + 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HeightRound) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Height, err = dc.ReadInt()
	if err != nil {
		return
	}
	z.Round, err = dc.ReadInt()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z HeightRound) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Height)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Round)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HeightRound) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Height)
	o = msgp.AppendInt(o, z.Round)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HeightRound) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Height, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	z.Round, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HeightRound) Msgsize() (s int) {
	s = 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageCommonVote) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0002 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0002}
		return
	}
	z.BasicMessage.SourceId, err = dc.ReadInt()
	if err != nil {
		return
	}
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0003 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0003}
		return
	}
	z.BasicMessage.HeightRound.Height, err = dc.ReadInt()
	if err != nil {
		return
	}
	z.BasicMessage.HeightRound.Round, err = dc.ReadInt()
	if err != nil {
		return
	}
	err = z.Idv.DecodeMsg(dc)
	if err != nil {
		return
	}
	z.Signature, err = dc.ReadBytes(z.Signature)
	if err != nil {
		return
	}
	z.PublicKey, err = dc.ReadBytes(z.PublicKey)
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageCommonVote) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	// array header, size 2
	err = en.Append(0x94, 0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BasicMessage.SourceId)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BasicMessage.HeightRound.Height)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BasicMessage.HeightRound.Round)
	if err != nil {
		return
	}
	err = z.Idv.EncodeMsg(en)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.PublicKey)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageCommonVote) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	// array header, size 2
	o = append(o, 0x94, 0x92)
	o = msgp.AppendInt(o, z.BasicMessage.SourceId)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.BasicMessage.HeightRound.Height)
	o = msgp.AppendInt(o, z.BasicMessage.HeightRound.Round)
	o, err = z.Idv.MarshalMsg(o)
	if err != nil {
		return
	}
	o = msgp.AppendBytes(o, z.Signature)
	o = msgp.AppendBytes(o, z.PublicKey)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageCommonVote) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0002 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0002}
		return
	}
	z.BasicMessage.SourceId, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0003 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0003}
		return
	}
	z.BasicMessage.HeightRound.Height, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	z.BasicMessage.HeightRound.Round, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	bts, err = z.Idv.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
	if err != nil {
		return
	}
	z.PublicKey, bts, err = msgp.ReadBytesBytes(bts, z.PublicKey)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageCommonVote) Msgsize() (s int) {
	s = 1 + 1 + msgp.IntSize + 1 + msgp.IntSize + msgp.IntSize + z.Idv.Msgsize() + msgp.BytesPrefixSize + len(z.Signature) + msgp.BytesPrefixSize + len(z.PublicKey)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageProposal) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0002 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0002}
		return
	}
	z.BasicMessage.SourceId, err = dc.ReadInt()
	if err != nil {
		return
	}
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0003 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0003}
		return
	}
	z.BasicMessage.HeightRound.Height, err = dc.ReadInt()
	if err != nil {
		return
	}
	z.BasicMessage.HeightRound.Round, err = dc.ReadInt()
	if err != nil {
		return
	}
	err = z.Value.DecodeMsg(dc)
	if err != nil {
		return
	}
	z.ValidRound, err = dc.ReadInt()
	if err != nil {
		return
	}
	z.PublicKey, err = dc.ReadBytes(z.PublicKey)
	if err != nil {
		return
	}
	z.Signature, err = dc.ReadBytes(z.Signature)
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageProposal) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	// array header, size 2
	err = en.Append(0x95, 0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BasicMessage.SourceId)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BasicMessage.HeightRound.Height)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BasicMessage.HeightRound.Round)
	if err != nil {
		return
	}
	err = z.Value.EncodeMsg(en)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ValidRound)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.PublicKey)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Signature)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageProposal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	// array header, size 2
	o = append(o, 0x95, 0x92)
	o = msgp.AppendInt(o, z.BasicMessage.SourceId)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.BasicMessage.HeightRound.Height)
	o = msgp.AppendInt(o, z.BasicMessage.HeightRound.Round)
	o, err = z.Value.MarshalMsg(o)
	if err != nil {
		return
	}
	o = msgp.AppendInt(o, z.ValidRound)
	o = msgp.AppendBytes(o, z.PublicKey)
	o = msgp.AppendBytes(o, z.Signature)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageProposal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0002 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0002}
		return
	}
	z.BasicMessage.SourceId, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0003 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0003}
		return
	}
	z.BasicMessage.HeightRound.Height, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	z.BasicMessage.HeightRound.Round, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	bts, err = z.Value.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	z.ValidRound, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		return
	}
	z.PublicKey, bts, err = msgp.ReadBytesBytes(bts, z.PublicKey)
	if err != nil {
		return
	}
	z.Signature, bts, err = msgp.ReadBytesBytes(bts, z.Signature)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageProposal) Msgsize() (s int) {
	s = 1 + 1 + msgp.IntSize + 1 + msgp.IntSize + msgp.IntSize + z.Value.Msgsize() + msgp.IntSize + msgp.BytesPrefixSize + len(z.PublicKey) + msgp.BytesPrefixSize + len(z.Signature)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SequencerProposal) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "RawSequencer":
			err = z.RawSequencer.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "BlsSignature":
			z.BlsSignature, err = dc.ReadBytes(z.BlsSignature)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SequencerProposal) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "RawSequencer"
	err = en.Append(0x82, 0xac, 0x52, 0x61, 0x77, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.RawSequencer.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "BlsSignature"
	err = en.Append(0xac, 0x42, 0x6c, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.BlsSignature)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SequencerProposal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "RawSequencer"
	o = append(o, 0x82, 0xac, 0x52, 0x61, 0x77, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72)
	o, err = z.RawSequencer.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "BlsSignature"
	o = append(o, 0xac, 0x42, 0x6c, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o = msgp.AppendBytes(o, z.BlsSignature)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SequencerProposal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "RawSequencer":
			bts, err = z.RawSequencer.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "BlsSignature":
			z.BlsSignature, bts, err = msgp.ReadBytesBytes(bts, z.BlsSignature)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SequencerProposal) Msgsize() (s int) {
	s = 1 + 13 + z.RawSequencer.Msgsize() + 13 + msgp.BytesPrefixSize + len(z.BlsSignature)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StringProposal) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			return
		}
		(*z) = StringProposal(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StringProposal) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StringProposal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StringProposal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			return
		}
		(*z) = StringProposal(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StringProposal) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}
