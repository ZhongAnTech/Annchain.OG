package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *HashOrNumber) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hash":
			err = z.Hash.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "Number":
			z.Number, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HashOrNumber) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Hash"
	err = en.Append(0x82, 0xa4, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = z.Hash.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "Number"
	err = en.Append(0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Number)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HashOrNumber) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Hash"
	o = append(o, 0x82, 0xa4, 0x48, 0x61, 0x73, 0x68)
	o, err = z.Hash.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "Number"
	o = append(o, 0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.Number)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashOrNumber) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hash":
			bts, err = z.Hash.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "Number":
			z.Number, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HashOrNumber) Msgsize() (s int) {
	s = 1 + 5 + z.Hash.Msgsize() + 7 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hash":
			err = z.Hash.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "Number":
			z.Number, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Hash"
	err = en.Append(0x82, 0xa4, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = z.Hash.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "Number"
	err = en.Append(0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Number)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Hash"
	o = append(o, 0x82, 0xa4, 0x48, 0x61, 0x73, 0x68)
	o, err = z.Hash.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "Number"
	o = append(o, 0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.Number)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hash":
			bts, err = z.Hash.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "Number":
			z.Number, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageHeader) Msgsize() (s int) {
	s = 1 + 5 + z.Hash.Msgsize() + 7 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageHeaderRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Origin":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					return
				}
				switch msgp.UnsafeString(field) {
				case "Hash":
					err = z.Origin.Hash.DecodeMsg(dc)
					if err != nil {
						return
					}
				case "Number":
					z.Origin.Number, err = dc.ReadUint64()
					if err != nil {
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						return
					}
				}
			}
		case "Amount":
			z.Amount, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "Skip":
			z.Skip, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "Reverse":
			z.Reverse, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageHeaderRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Origin"
	// map header, size 2
	// write "Hash"
	err = en.Append(0x84, 0xa6, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x82, 0xa4, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = z.Origin.Hash.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "Number"
	err = en.Append(0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Origin.Number)
	if err != nil {
		return
	}
	// write "Amount"
	err = en.Append(0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Amount)
	if err != nil {
		return
	}
	// write "Skip"
	err = en.Append(0xa4, 0x53, 0x6b, 0x69, 0x70)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Skip)
	if err != nil {
		return
	}
	// write "Reverse"
	err = en.Append(0xa7, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Reverse)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageHeaderRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Origin"
	// map header, size 2
	// string "Hash"
	o = append(o, 0x84, 0xa6, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x82, 0xa4, 0x48, 0x61, 0x73, 0x68)
	o, err = z.Origin.Hash.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "Number"
	o = append(o, 0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.Origin.Number)
	// string "Amount"
	o = append(o, 0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendUint64(o, z.Amount)
	// string "Skip"
	o = append(o, 0xa4, 0x53, 0x6b, 0x69, 0x70)
	o = msgp.AppendUint64(o, z.Skip)
	// string "Reverse"
	o = append(o, 0xa7, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65)
	o = msgp.AppendBool(o, z.Reverse)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageHeaderRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Origin":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					return
				}
				switch msgp.UnsafeString(field) {
				case "Hash":
					bts, err = z.Origin.Hash.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				case "Number":
					z.Origin.Number, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						return
					}
				}
			}
		case "Amount":
			z.Amount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		case "Skip":
			z.Skip, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		case "Reverse":
			z.Reverse, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageHeaderRequest) Msgsize() (s int) {
	s = 1 + 7 + 1 + 5 + z.Origin.Hash.Msgsize() + 7 + msgp.Uint64Size + 7 + msgp.Uint64Size + 5 + msgp.Uint64Size + 8 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageHeaderResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Sequencers":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Sequencers) >= int(zb0002) {
				z.Sequencers = (z.Sequencers)[:zb0002]
			} else {
				z.Sequencers = make([]*Sequencer, zb0002)
			}
			for za0001 := range z.Sequencers {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}
					z.Sequencers[za0001] = nil
				} else {
					if z.Sequencers[za0001] == nil {
						z.Sequencers[za0001] = new(Sequencer)
					}
					err = z.Sequencers[za0001].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageHeaderResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Sequencers"
	err = en.Append(0x81, 0xaa, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Sequencers)))
	if err != nil {
		return
	}
	for za0001 := range z.Sequencers {
		if z.Sequencers[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Sequencers[za0001].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageHeaderResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Sequencers"
	o = append(o, 0x81, 0xaa, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Sequencers)))
	for za0001 := range z.Sequencers {
		if z.Sequencers[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Sequencers[za0001].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageHeaderResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Sequencers":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Sequencers) >= int(zb0002) {
				z.Sequencers = (z.Sequencers)[:zb0002]
			} else {
				z.Sequencers = make([]*Sequencer, zb0002)
			}
			for za0001 := range z.Sequencers {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Sequencers[za0001] = nil
				} else {
					if z.Sequencers[za0001] == nil {
						z.Sequencers[za0001] = new(Sequencer)
					}
					bts, err = z.Sequencers[za0001].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageHeaderResponse) Msgsize() (s int) {
	s = 1 + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.Sequencers {
		if z.Sequencers[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Sequencers[za0001].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageNewSequence) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Sequencer = nil
	} else {
		if z.Sequencer == nil {
			z.Sequencer = new(Sequencer)
		}
		err = z.Sequencer.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageNewSequence) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	if z.Sequencer == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Sequencer.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageNewSequence) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	if z.Sequencer == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Sequencer.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageNewSequence) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Sequencer = nil
	} else {
		if z.Sequencer == nil {
			z.Sequencer = new(Sequencer)
		}
		bts, err = z.Sequencer.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageNewSequence) Msgsize() (s int) {
	s = 1
	if z.Sequencer == nil {
		s += msgp.NilSize
	} else {
		s += z.Sequencer.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageNewSyncTxsResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Txs) >= int(zb0002) {
		z.Txs = (z.Txs)[:zb0002]
	} else {
		z.Txs = make([]*Tx, zb0002)
	}
	for za0001 := range z.Txs {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				return
			}
			z.Txs[za0001] = nil
		} else {
			if z.Txs[za0001] == nil {
				z.Txs[za0001] = new(Tx)
			}
			err = z.Txs[za0001].DecodeMsg(dc)
			if err != nil {
				return
			}
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Sequencer = nil
	} else {
		if z.Sequencer == nil {
			z.Sequencer = new(Sequencer)
		}
		err = z.Sequencer.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageNewSyncTxsResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Txs)))
	if err != nil {
		return
	}
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Txs[za0001].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	if z.Sequencer == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Sequencer.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageNewSyncTxsResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Txs)))
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Txs[za0001].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	if z.Sequencer == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Sequencer.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageNewSyncTxsResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap(z.Txs) >= int(zb0002) {
		z.Txs = (z.Txs)[:zb0002]
	} else {
		z.Txs = make([]*Tx, zb0002)
	}
	for za0001 := range z.Txs {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Txs[za0001] = nil
		} else {
			if z.Txs[za0001] == nil {
				z.Txs[za0001] = new(Tx)
			}
			bts, err = z.Txs[za0001].UnmarshalMsg(bts)
			if err != nil {
				return
			}
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Sequencer = nil
	} else {
		if z.Sequencer == nil {
			z.Sequencer = new(Sequencer)
		}
		bts, err = z.Sequencer.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageNewSyncTxsResponse) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Txs[za0001].Msgsize()
		}
	}
	if z.Sequencer == nil {
		s += msgp.NilSize
	} else {
		s += z.Sequencer.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageNewTx) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Tx = nil
	} else {
		if z.Tx == nil {
			z.Tx = new(Tx)
		}
		err = z.Tx.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageNewTx) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	if z.Tx == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Tx.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageNewTx) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	if z.Tx == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Tx.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageNewTx) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Tx = nil
	} else {
		if z.Tx == nil {
			z.Tx = new(Tx)
		}
		bts, err = z.Tx.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageNewTx) Msgsize() (s int) {
	s = 1
	if z.Tx == nil {
		s += msgp.NilSize
	} else {
		s += z.Tx.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageNewTxs) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Txs) >= int(zb0002) {
		z.Txs = (z.Txs)[:zb0002]
	} else {
		z.Txs = make([]*Tx, zb0002)
	}
	for za0001 := range z.Txs {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				return
			}
			z.Txs[za0001] = nil
		} else {
			if z.Txs[za0001] == nil {
				z.Txs[za0001] = new(Tx)
			}
			err = z.Txs[za0001].DecodeMsg(dc)
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageNewTxs) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Txs)))
	if err != nil {
		return
	}
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Txs[za0001].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageNewTxs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Txs)))
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Txs[za0001].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageNewTxs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap(z.Txs) >= int(zb0002) {
		z.Txs = (z.Txs)[:zb0002]
	} else {
		z.Txs = make([]*Tx, zb0002)
	}
	for za0001 := range z.Txs {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Txs[za0001] = nil
		} else {
			if z.Txs[za0001] == nil {
				z.Txs[za0001] = new(Tx)
			}
			bts, err = z.Txs[za0001].UnmarshalMsg(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageNewTxs) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Txs[za0001].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageSyncRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Hashes) >= int(zb0002) {
		z.Hashes = (z.Hashes)[:zb0002]
	} else {
		z.Hashes = make([]Hash, zb0002)
	}
	for za0001 := range z.Hashes {
		err = z.Hashes[za0001].DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageSyncRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Hashes)))
	if err != nil {
		return
	}
	for za0001 := range z.Hashes {
		err = z.Hashes[za0001].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageSyncRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Hashes)))
	for za0001 := range z.Hashes {
		o, err = z.Hashes[za0001].MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageSyncRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap(z.Hashes) >= int(zb0002) {
		z.Hashes = (z.Hashes)[:zb0002]
	} else {
		z.Hashes = make([]Hash, zb0002)
	}
	for za0001 := range z.Hashes {
		bts, err = z.Hashes[za0001].UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageSyncRequest) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Hashes {
		s += z.Hashes[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageSyncResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Txs) >= int(zb0002) {
		z.Txs = (z.Txs)[:zb0002]
	} else {
		z.Txs = make([]*Tx, zb0002)
	}
	for za0001 := range z.Txs {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				return
			}
			z.Txs[za0001] = nil
		} else {
			if z.Txs[za0001] == nil {
				z.Txs[za0001] = new(Tx)
			}
			err = z.Txs[za0001].DecodeMsg(dc)
			if err != nil {
				return
			}
		}
	}
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Sequencers) >= int(zb0003) {
		z.Sequencers = (z.Sequencers)[:zb0003]
	} else {
		z.Sequencers = make([]*Sequencer, zb0003)
	}
	for za0002 := range z.Sequencers {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				return
			}
			z.Sequencers[za0002] = nil
		} else {
			if z.Sequencers[za0002] == nil {
				z.Sequencers[za0002] = new(Sequencer)
			}
			err = z.Sequencers[za0002].DecodeMsg(dc)
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageSyncResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Txs)))
	if err != nil {
		return
	}
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Txs[za0001].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.Sequencers)))
	if err != nil {
		return
	}
	for za0002 := range z.Sequencers {
		if z.Sequencers[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Sequencers[za0002].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageSyncResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Txs)))
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Txs[za0001].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.Sequencers)))
	for za0002 := range z.Sequencers {
		if z.Sequencers[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Sequencers[za0002].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageSyncResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap(z.Txs) >= int(zb0002) {
		z.Txs = (z.Txs)[:zb0002]
	} else {
		z.Txs = make([]*Tx, zb0002)
	}
	for za0001 := range z.Txs {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Txs[za0001] = nil
		} else {
			if z.Txs[za0001] == nil {
				z.Txs[za0001] = new(Tx)
			}
			bts, err = z.Txs[za0001].UnmarshalMsg(bts)
			if err != nil {
				return
			}
		}
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap(z.Sequencers) >= int(zb0003) {
		z.Sequencers = (z.Sequencers)[:zb0003]
	} else {
		z.Sequencers = make([]*Sequencer, zb0003)
	}
	for za0002 := range z.Sequencers {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Sequencers[za0002] = nil
		} else {
			if z.Sequencers[za0002] == nil {
				z.Sequencers[za0002] = new(Sequencer)
			}
			bts, err = z.Sequencers[za0002].UnmarshalMsg(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageSyncResponse) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Txs[za0001].Msgsize()
		}
	}
	s += msgp.ArrayHeaderSize
	for za0002 := range z.Sequencers {
		if z.Sequencers[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += z.Sequencers[za0002].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageTxsRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hashes":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Hashes) >= int(zb0002) {
				z.Hashes = (z.Hashes)[:zb0002]
			} else {
				z.Hashes = make([]Hash, zb0002)
			}
			for za0001 := range z.Hashes {
				err = z.Hashes[za0001].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "SeqHash":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.SeqHash = nil
			} else {
				if z.SeqHash == nil {
					z.SeqHash = new(Hash)
				}
				err = z.SeqHash.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Id":
			z.Id, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageTxsRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Hashes"
	err = en.Append(0x83, 0xa6, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Hashes)))
	if err != nil {
		return
	}
	for za0001 := range z.Hashes {
		err = z.Hashes[za0001].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "SeqHash"
	err = en.Append(0xa7, 0x53, 0x65, 0x71, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	if z.SeqHash == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.SeqHash.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "Id"
	err = en.Append(0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Id)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageTxsRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Hashes"
	o = append(o, 0x83, 0xa6, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Hashes)))
	for za0001 := range z.Hashes {
		o, err = z.Hashes[za0001].MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "SeqHash"
	o = append(o, 0xa7, 0x53, 0x65, 0x71, 0x48, 0x61, 0x73, 0x68)
	if z.SeqHash == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.SeqHash.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "Id"
	o = append(o, 0xa2, 0x49, 0x64)
	o = msgp.AppendUint64(o, z.Id)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageTxsRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hashes":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Hashes) >= int(zb0002) {
				z.Hashes = (z.Hashes)[:zb0002]
			} else {
				z.Hashes = make([]Hash, zb0002)
			}
			for za0001 := range z.Hashes {
				bts, err = z.Hashes[za0001].UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "SeqHash":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SeqHash = nil
			} else {
				if z.SeqHash == nil {
					z.SeqHash = new(Hash)
				}
				bts, err = z.SeqHash.UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "Id":
			z.Id, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageTxsRequest) Msgsize() (s int) {
	s = 1 + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Hashes {
		s += z.Hashes[za0001].Msgsize()
	}
	s += 8
	if z.SeqHash == nil {
		s += msgp.NilSize
	} else {
		s += z.SeqHash.Msgsize()
	}
	s += 3 + msgp.Uint64Size
	return
}
