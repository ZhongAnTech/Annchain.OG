package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BloomFilter) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Data, err = dc.ReadBytes(z.Data)
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BloomFilter) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BloomFilter) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BloomFilter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BloomFilter) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HashOrNumber) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Hash = nil
	} else {
		if z.Hash == nil {
			z.Hash = new(Hash)
		}
		err = z.Hash.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	z.Number, err = dc.ReadUint64()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HashOrNumber) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.Hash == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Hash.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	err = en.WriteUint64(z.Number)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HashOrNumber) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.Hash == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Hash.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	o = msgp.AppendUint64(o, z.Number)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashOrNumber) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Hash = nil
	} else {
		if z.Hash == nil {
			z.Hash = new(Hash)
		}
		bts, err = z.Hash.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	z.Number, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HashOrNumber) Msgsize() (s int) {
	s = 1
	if z.Hash == nil {
		s += msgp.NilSize
	} else {
		s += z.Hash.Msgsize()
	}
	s += msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageBodiesRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	err = z.SeqHashes.DecodeMsg(dc)
	if err != nil {
		return
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageBodiesRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = z.SeqHashes.EncodeMsg(en)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageBodiesRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o, err = z.SeqHashes.MarshalMsg(o)
	if err != nil {
		return
	}
	o = msgp.AppendUint32(o, z.RequestId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageBodiesRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	bts, err = z.SeqHashes.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageBodiesRequest) Msgsize() (s int) {
	s = 1 + z.SeqHashes.Msgsize() + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageBodiesResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Bodies) >= int(zb0002) {
		z.Bodies = (z.Bodies)[:zb0002]
	} else {
		z.Bodies = make([]RawData, zb0002)
	}
	for za0001 := range z.Bodies {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes([]byte(z.Bodies[za0001]))
			if err != nil {
				return
			}
			z.Bodies[za0001] = RawData(zb0003)
		}
	}
	z.RequestedId, err = dc.ReadUint32()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageBodiesResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Bodies)))
	if err != nil {
		return
	}
	for za0001 := range z.Bodies {
		err = en.WriteBytes([]byte(z.Bodies[za0001]))
		if err != nil {
			return
		}
	}
	err = en.WriteUint32(z.RequestedId)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageBodiesResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Bodies)))
	for za0001 := range z.Bodies {
		o = msgp.AppendBytes(o, []byte(z.Bodies[za0001]))
	}
	o = msgp.AppendUint32(o, z.RequestedId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageBodiesResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap(z.Bodies) >= int(zb0002) {
		z.Bodies = (z.Bodies)[:zb0002]
	} else {
		z.Bodies = make([]RawData, zb0002)
	}
	for za0001 := range z.Bodies {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, []byte(z.Bodies[za0001]))
			if err != nil {
				return
			}
			z.Bodies[za0001] = RawData(zb0003)
		}
	}
	z.RequestedId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageBodiesResponse) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Bodies {
		s += msgp.BytesPrefixSize + len([]byte(z.Bodies[za0001]))
	}
	s += msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageHeaderRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0002 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0002}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Origin.Hash = nil
	} else {
		if z.Origin.Hash == nil {
			z.Origin.Hash = new(Hash)
		}
		err = z.Origin.Hash.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	z.Origin.Number, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.Amount, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.Skip, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.Reverse, err = dc.ReadBool()
	if err != nil {
		return
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageHeaderRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	// array header, size 2
	err = en.Append(0x95, 0x92)
	if err != nil {
		return
	}
	if z.Origin.Hash == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Origin.Hash.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	err = en.WriteUint64(z.Origin.Number)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Amount)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Skip)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Reverse)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageHeaderRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	// array header, size 2
	o = append(o, 0x95, 0x92)
	if z.Origin.Hash == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Origin.Hash.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	o = msgp.AppendUint64(o, z.Origin.Number)
	o = msgp.AppendUint64(o, z.Amount)
	o = msgp.AppendUint64(o, z.Skip)
	o = msgp.AppendBool(o, z.Reverse)
	o = msgp.AppendUint32(o, z.RequestId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageHeaderRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0002 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0002}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Origin.Hash = nil
	} else {
		if z.Origin.Hash == nil {
			z.Origin.Hash = new(Hash)
		}
		bts, err = z.Origin.Hash.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	z.Origin.Number, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	z.Amount, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	z.Skip, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	z.Reverse, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		return
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageHeaderRequest) Msgsize() (s int) {
	s = 1 + 1
	if z.Origin.Hash == nil {
		s += msgp.NilSize
	} else {
		s += z.Origin.Hash.Msgsize()
	}
	s += msgp.Uint64Size + msgp.Uint64Size + msgp.Uint64Size + msgp.BoolSize + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageHeaderResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	err = z.Headers.DecodeMsg(dc)
	if err != nil {
		return
	}
	z.RequestedId, err = dc.ReadUint32()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageHeaderResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = z.Headers.EncodeMsg(en)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RequestedId)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageHeaderResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o, err = z.Headers.MarshalMsg(o)
	if err != nil {
		return
	}
	o = msgp.AppendUint32(o, z.RequestedId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageHeaderResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	bts, err = z.Headers.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	z.RequestedId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageHeaderResponse) Msgsize() (s int) {
	s = 1 + z.Headers.Msgsize() + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageNewSequencer) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.RawSequencer = nil
	} else {
		if z.RawSequencer == nil {
			z.RawSequencer = new(RawSequencer)
		}
		err = z.RawSequencer.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageNewSequencer) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	if z.RawSequencer == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RawSequencer.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageNewSequencer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	if z.RawSequencer == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RawSequencer.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageNewSequencer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.RawSequencer = nil
	} else {
		if z.RawSequencer == nil {
			z.RawSequencer = new(RawSequencer)
		}
		bts, err = z.RawSequencer.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageNewSequencer) Msgsize() (s int) {
	s = 1
	if z.RawSequencer == nil {
		s += msgp.NilSize
	} else {
		s += z.RawSequencer.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageNewTx) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.RawTx = nil
	} else {
		if z.RawTx == nil {
			z.RawTx = new(RawTx)
		}
		err = z.RawTx.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageNewTx) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	if z.RawTx == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RawTx.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageNewTx) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	if z.RawTx == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RawTx.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageNewTx) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.RawTx = nil
	} else {
		if z.RawTx == nil {
			z.RawTx = new(RawTx)
		}
		bts, err = z.RawTx.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageNewTx) Msgsize() (s int) {
	s = 1
	if z.RawTx == nil {
		s += msgp.NilSize
	} else {
		s += z.RawTx.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageNewTxs) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	err = z.RawTxs.DecodeMsg(dc)
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageNewTxs) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = z.RawTxs.EncodeMsg(en)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageNewTxs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o, err = z.RawTxs.MarshalMsg(o)
	if err != nil {
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageNewTxs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	bts, err = z.RawTxs.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageNewTxs) Msgsize() (s int) {
	s = 1 + z.RawTxs.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessagePing) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessagePing) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Data"
	err = en.Append(0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessagePing) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Data"
	o = append(o, 0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessagePing) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessagePing) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessagePong) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessagePong) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Data"
	err = en.Append(0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessagePong) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Data"
	o = append(o, 0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessagePong) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessagePong) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageSequencerHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Hash = nil
	} else {
		if z.Hash == nil {
			z.Hash = new(Hash)
		}
		err = z.Hash.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	z.Number, err = dc.ReadUint64()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageSequencerHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.Hash == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Hash.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	err = en.WriteUint64(z.Number)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageSequencerHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.Hash == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Hash.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	o = msgp.AppendUint64(o, z.Number)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageSequencerHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Hash = nil
	} else {
		if z.Hash == nil {
			z.Hash = new(Hash)
		}
		bts, err = z.Hash.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	z.Number, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageSequencerHeader) Msgsize() (s int) {
	s = 1
	if z.Hash == nil {
		s += msgp.NilSize
	} else {
		s += z.Hash.Msgsize()
	}
	s += msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageSyncRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	err = z.Hashes.DecodeMsg(dc)
	if err != nil {
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Filter = nil
	} else {
		if z.Filter == nil {
			z.Filter = new(BloomFilter)
		}
		var zb0002 uint32
		zb0002, err = dc.ReadArrayHeader()
		if err != nil {
			return
		}
		if zb0002 != 1 {
			err = msgp.ArrayError{Wanted: 1, Got: zb0002}
			return
		}
		z.Filter.Data, err = dc.ReadBytes(z.Filter.Data)
		if err != nil {
			return
		}
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageSyncRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = z.Hashes.EncodeMsg(en)
	if err != nil {
		return
	}
	if z.Filter == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 1
		err = en.Append(0x91)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Filter.Data)
		if err != nil {
			return
		}
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageSyncRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o, err = z.Hashes.MarshalMsg(o)
	if err != nil {
		return
	}
	if z.Filter == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 1
		o = append(o, 0x91)
		o = msgp.AppendBytes(o, z.Filter.Data)
	}
	o = msgp.AppendUint32(o, z.RequestId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageSyncRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	bts, err = z.Hashes.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Filter = nil
	} else {
		if z.Filter == nil {
			z.Filter = new(BloomFilter)
		}
		var zb0002 uint32
		zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			return
		}
		if zb0002 != 1 {
			err = msgp.ArrayError{Wanted: 1, Got: zb0002}
			return
		}
		z.Filter.Data, bts, err = msgp.ReadBytesBytes(bts, z.Filter.Data)
		if err != nil {
			return
		}
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageSyncRequest) Msgsize() (s int) {
	s = 1 + z.Hashes.Msgsize()
	if z.Filter == nil {
		s += msgp.NilSize
	} else {
		s += 1 + msgp.BytesPrefixSize + len(z.Filter.Data)
	}
	s += msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageSyncResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	err = z.RawTxs.DecodeMsg(dc)
	if err != nil {
		return
	}
	err = z.RawSequencers.DecodeMsg(dc)
	if err != nil {
		return
	}
	z.RequestedId, err = dc.ReadUint32()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageSyncResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = z.RawTxs.EncodeMsg(en)
	if err != nil {
		return
	}
	err = z.RawSequencers.EncodeMsg(en)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RequestedId)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageSyncResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o, err = z.RawTxs.MarshalMsg(o)
	if err != nil {
		return
	}
	o, err = z.RawSequencers.MarshalMsg(o)
	if err != nil {
		return
	}
	o = msgp.AppendUint32(o, z.RequestedId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageSyncResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	bts, err = z.RawTxs.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	bts, err = z.RawSequencers.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	z.RequestedId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageSyncResponse) Msgsize() (s int) {
	s = 1 + z.RawTxs.Msgsize() + z.RawSequencers.Msgsize() + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageTxsRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	err = z.Hashes.DecodeMsg(dc)
	if err != nil {
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.SeqHash = nil
	} else {
		if z.SeqHash == nil {
			z.SeqHash = new(Hash)
		}
		err = z.SeqHash.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	z.Id, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.RequestId, err = dc.ReadUint32()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageTxsRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = z.Hashes.EncodeMsg(en)
	if err != nil {
		return
	}
	if z.SeqHash == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.SeqHash.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	err = en.WriteUint64(z.Id)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RequestId)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageTxsRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o, err = z.Hashes.MarshalMsg(o)
	if err != nil {
		return
	}
	if z.SeqHash == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.SeqHash.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	o = msgp.AppendUint64(o, z.Id)
	o = msgp.AppendUint32(o, z.RequestId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageTxsRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	bts, err = z.Hashes.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SeqHash = nil
	} else {
		if z.SeqHash == nil {
			z.SeqHash = new(Hash)
		}
		bts, err = z.SeqHash.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	z.Id, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	z.RequestId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageTxsRequest) Msgsize() (s int) {
	s = 1 + z.Hashes.Msgsize()
	if z.SeqHash == nil {
		s += msgp.NilSize
	} else {
		s += z.SeqHash.Msgsize()
	}
	s += msgp.Uint64Size + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageTxsResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	err = z.RawTxs.DecodeMsg(dc)
	if err != nil {
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.RawSequencer = nil
	} else {
		if z.RawSequencer == nil {
			z.RawSequencer = new(RawSequencer)
		}
		err = z.RawSequencer.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	z.RequestedId, err = dc.ReadUint32()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageTxsResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = z.RawTxs.EncodeMsg(en)
	if err != nil {
		return
	}
	if z.RawSequencer == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RawSequencer.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	err = en.WriteUint32(z.RequestedId)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageTxsResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o, err = z.RawTxs.MarshalMsg(o)
	if err != nil {
		return
	}
	if z.RawSequencer == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RawSequencer.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	o = msgp.AppendUint32(o, z.RequestedId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageTxsResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	bts, err = z.RawTxs.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.RawSequencer = nil
	} else {
		if z.RawSequencer == nil {
			z.RawSequencer = new(RawSequencer)
		}
		bts, err = z.RawSequencer.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	z.RequestedId, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageTxsResponse) Msgsize() (s int) {
	s = 1 + z.RawTxs.Msgsize()
	if z.RawSequencer == nil {
		s += msgp.NilSize
	} else {
		s += z.RawSequencer.Msgsize()
	}
	s += msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RawData) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 []byte
		zb0001, err = dc.ReadBytes([]byte((*z)))
		if err != nil {
			return
		}
		(*z) = RawData(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z RawData) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RawData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RawData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 []byte
		zb0001, bts, err = msgp.ReadBytesBytes(bts, []byte((*z)))
		if err != nil {
			return
		}
		(*z) = RawData(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RawData) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}
