package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TxBase) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 10 {
		err = msgp.ArrayError{Wanted: 10, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, err = dc.ReadUint16()
		if err != nil {
			return
		}
		z.Type = TxBaseType(zb0002)
	}
	err = z.Hash.DecodeMsg(dc)
	if err != nil {
		return
	}
	err = z.ParentsHash.DecodeMsg(dc)
	if err != nil {
		return
	}
	z.AccountNonce, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.Height, err = dc.ReadUint64()
	if err != nil {
		return
	}
	err = z.PublicKey.DecodeMsg(dc)
	if err != nil {
		return
	}
	err = z.Signature.DecodeMsg(dc)
	if err != nil {
		return
	}
	z.MineNonce, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.Weight, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.Version, err = dc.ReadByte()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TxBase) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 10
	err = en.Append(0x9a)
	if err != nil {
		return
	}
	err = en.WriteUint16(uint16(z.Type))
	if err != nil {
		return
	}
	err = z.Hash.EncodeMsg(en)
	if err != nil {
		return
	}
	err = z.ParentsHash.EncodeMsg(en)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.AccountNonce)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		return
	}
	err = z.PublicKey.EncodeMsg(en)
	if err != nil {
		return
	}
	err = z.Signature.EncodeMsg(en)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.MineNonce)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Weight)
	if err != nil {
		return
	}
	err = en.WriteByte(z.Version)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TxBase) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 10
	o = append(o, 0x9a)
	o = msgp.AppendUint16(o, uint16(z.Type))
	o, err = z.Hash.MarshalMsg(o)
	if err != nil {
		return
	}
	o, err = z.ParentsHash.MarshalMsg(o)
	if err != nil {
		return
	}
	o = msgp.AppendUint64(o, z.AccountNonce)
	o = msgp.AppendUint64(o, z.Height)
	o, err = z.PublicKey.MarshalMsg(o)
	if err != nil {
		return
	}
	o, err = z.Signature.MarshalMsg(o)
	if err != nil {
		return
	}
	o = msgp.AppendUint64(o, z.MineNonce)
	o = msgp.AppendUint64(o, z.Weight)
	o = msgp.AppendByte(o, z.Version)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxBase) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 10 {
		err = msgp.ArrayError{Wanted: 10, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			return
		}
		z.Type = TxBaseType(zb0002)
	}
	bts, err = z.Hash.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	bts, err = z.ParentsHash.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	z.AccountNonce, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	z.Height, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	bts, err = z.PublicKey.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	bts, err = z.Signature.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	z.MineNonce, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	z.Weight, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	z.Version, bts, err = msgp.ReadByteBytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TxBase) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + z.Hash.Msgsize() + z.ParentsHash.Msgsize() + msgp.Uint64Size + msgp.Uint64Size + z.PublicKey.Msgsize() + z.Signature.Msgsize() + msgp.Uint64Size + msgp.Uint64Size + msgp.ByteSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxBaseJson) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 10 {
		err = msgp.ArrayError{Wanted: 10, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, err = dc.ReadUint16()
		if err != nil {
			return
		}
		z.Type = TxBaseType(zb0002)
	}
	err = z.Hash.DecodeMsg(dc)
	if err != nil {
		return
	}
	err = z.ParentsHash.DecodeMsg(dc)
	if err != nil {
		return
	}
	z.AccountNonce, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.Height, err = dc.ReadUint64()
	if err != nil {
		return
	}
	err = z.PublicKey.DecodeMsg(dc)
	if err != nil {
		return
	}
	err = z.Signature.DecodeMsg(dc)
	if err != nil {
		return
	}
	z.MineNonce, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.Weight, err = dc.ReadUint64()
	if err != nil {
		return
	}
	z.Version, err = dc.ReadByte()
	if err != nil {
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TxBaseJson) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 10
	err = en.Append(0x9a)
	if err != nil {
		return
	}
	err = en.WriteUint16(uint16(z.Type))
	if err != nil {
		return
	}
	err = z.Hash.EncodeMsg(en)
	if err != nil {
		return
	}
	err = z.ParentsHash.EncodeMsg(en)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.AccountNonce)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		return
	}
	err = z.PublicKey.EncodeMsg(en)
	if err != nil {
		return
	}
	err = z.Signature.EncodeMsg(en)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.MineNonce)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Weight)
	if err != nil {
		return
	}
	err = en.WriteByte(z.Version)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TxBaseJson) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 10
	o = append(o, 0x9a)
	o = msgp.AppendUint16(o, uint16(z.Type))
	o, err = z.Hash.MarshalMsg(o)
	if err != nil {
		return
	}
	o, err = z.ParentsHash.MarshalMsg(o)
	if err != nil {
		return
	}
	o = msgp.AppendUint64(o, z.AccountNonce)
	o = msgp.AppendUint64(o, z.Height)
	o, err = z.PublicKey.MarshalMsg(o)
	if err != nil {
		return
	}
	o, err = z.Signature.MarshalMsg(o)
	if err != nil {
		return
	}
	o = msgp.AppendUint64(o, z.MineNonce)
	o = msgp.AppendUint64(o, z.Weight)
	o = msgp.AppendByte(o, z.Version)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxBaseJson) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 10 {
		err = msgp.ArrayError{Wanted: 10, Got: zb0001}
		return
	}
	{
		var zb0002 uint16
		zb0002, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			return
		}
		z.Type = TxBaseType(zb0002)
	}
	bts, err = z.Hash.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	bts, err = z.ParentsHash.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	z.AccountNonce, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	z.Height, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	bts, err = z.PublicKey.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	bts, err = z.Signature.UnmarshalMsg(bts)
	if err != nil {
		return
	}
	z.MineNonce, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	z.Weight, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		return
	}
	z.Version, bts, err = msgp.ReadByteBytes(bts)
	if err != nil {
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TxBaseJson) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + z.Hash.Msgsize() + z.ParentsHash.Msgsize() + msgp.Uint64Size + msgp.Uint64Size + z.PublicKey.Msgsize() + z.Signature.Msgsize() + msgp.Uint64Size + msgp.Uint64Size + msgp.ByteSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxBaseType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint16
		zb0001, err = dc.ReadUint16()
		if err != nil {
			return
		}
		(*z) = TxBaseType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TxBaseType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint16(uint16(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TxBaseType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint16(o, uint16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxBaseType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint16
		zb0001, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			return
		}
		(*z) = TxBaseType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TxBaseType) Msgsize() (s int) {
	s = msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxiSmallCaseMarshal) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Txi":
			err = z.Txi.DecodeMsg(dc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TxiSmallCaseMarshal) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Txi"
	err = en.Append(0x81, 0xa3, 0x54, 0x78, 0x69)
	if err != nil {
		return
	}
	err = z.Txi.EncodeMsg(en)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TxiSmallCaseMarshal) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Txi"
	o = append(o, 0x81, 0xa3, 0x54, 0x78, 0x69)
	o, err = z.Txi.MarshalMsg(o)
	if err != nil {
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxiSmallCaseMarshal) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Txi":
			bts, err = z.Txi.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TxiSmallCaseMarshal) Msgsize() (s int) {
	s = 1 + 4 + z.Txi.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Txis) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Txis, zb0002)
	}
	for zb0001 := range *z {
		err = (*z)[zb0001].DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Txis) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		return
	}
	for zb0003 := range z {
		err = z[zb0003].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Txis) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		o, err = z[zb0003].MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Txis) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Txis, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Txis) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		s += z[zb0003].Msgsize()
	}
	return
}
